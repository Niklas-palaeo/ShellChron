T_amp <- 20
T_per <- 365
T_pha <- 200
T_av <- 15
T_par <- c(T_amp, T_per, T_pha, T_av)
d18Ow <- 0 # Set d18O of water to the default (0 permille VSMOW)
Tpartab <- cbind(parameter = c("Growth rate amplitude (um/d)", "Growth rate period (days)", "Growth rate phase (julian day)", "Growth rate average (um/d)", "d18Ow (permille VSMOW)"),
value = c(T_par, d18Ow))
# Create temperature sinusoid
Tcurve <- as.data.frame(SSTcurve(T_par, years = 3, t_int = 1))
Tcurve$t <- as.Date(Tcurve$t, origin = "2017-01-01")
# Convert temperature to d18Oc
Tcurve$d18Oc <- d18Omodel(Tcurve, d18Ow, "aragonite")[, 2]
# Plot resulting curve
SSTplot <- ggplot2::ggplot(data = Tcurve, aes(t, SST)) +
ggplot2::geom_line() +
ggplot2::ggtitle("Example of temperature sinusoid") +
ggplot2::xlab("Time (months)") +
ggplot2::ylab("Temperature (in degrees C)") +
ggplot2::scale_x_date(date_breaks = "2 months",
date_minor_breaks = "1 month") +
ggplot2::scale_y_continuous(breaks = round(seq(min(Tcurve$SST), max(Tcurve$SST), by = 5), 1),
sec.axis = sec_axis(trans = ~ (20.6 - .) / 4.34 + 0 + 0.2, name = "d18Oc (aragonite; Grossman and Ku, 1986)"))
Combined_plots <- ggpubr::ggarrange(SSTplot, tableGrob(Tpartab), labels = c("A", "B"), widths = c(2, 1), ncol = 2, nrow = 1) # Combine plots
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("SST-d18Oc plot.pdf", width = 10, height = 5)
print(Combined_plots)
dev.off()
# Set parameters
T_amp <- 20
T_per <- 365
T_pha <- 200
T_av <- 15
T_par <- c(T_amp, T_per, T_pha, T_av)
d18Ow <- 0 # Set d18O of water to the default (0 permille VSMOW)
Tpartab <- cbind(parameter = c("Growth rate amplitude (um/d)", "Growth rate period (days)", "Growth rate phase (julian day)", "Growth rate average (um/d)", "d18Ow (permille VSMOW)"),
value = c(T_par, d18Ow))
# Create temperature sinusoid
Tcurve <- as.data.frame(SSTcurve(T_par, years = 3, t_int = 1))
Tcurve$t <- as.Date(Tcurve$t, origin = "2017-01-01")
# Convert temperature to d18Oc
Tcurve$d18Oc <- d18Omodel(Tcurve, d18Ow, "aragonite")[, 2]
# Plot resulting curve
SSTplot <- ggplot2::ggplot(data = Tcurve, aes(t, SST)) +
ggplot2::geom_line() +
ggplot2::ggtitle("Example of temperature sinusoid") +
ggplot2::xlab("Time (months)") +
ggplot2::ylab("Temperature (in degrees C)") +
ggplot2::scale_x_date(date_breaks = "2 months",
date_minor_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90)) +
ggplot2::scale_y_continuous(breaks = round(seq(min(Tcurve$SST), max(Tcurve$SST), by = 5), 1),
sec.axis = sec_axis(trans = ~ (20.6 - .) / 4.34 + 0 + 0.2, name = "d18Oc (aragonite; Grossman and Ku, 1986)"))
Combined_plots <- ggpubr::ggarrange(SSTplot, tableGrob(Tpartab), labels = c("A", "B"), widths = c(2, 1), ncol = 2, nrow = 1) # Combine plots
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("SST-d18Oc plot.pdf", width = 10, height = 5)
print(Combined_plots)
dev.off()
rm(list=ls())
x <-  seq(1, 40, 1)
x_err <- rep(0.1, 40)
y <- sin((2 * pi * (seq(1, 40, 1) - 8 + 30 / 4)) / 30)
y_err <- rep(0.1, 40)
X <- seq(1.5, 39.5, 1)
Y <- cbind(seq(1, 39, 1), 0.9 * sin((2 * pi * (seq(1, 39, 1) - 9 + 25 / 4)) / 25))
x11(); plot(x, y)
lines(X, Y)
lines(Y)
input <- as.data.frame(seq(1, 40, 1))
View(input)
input <- data.frame(x = seq(1, 40, 1),
x_err = rep(0.1, 40),
y = sin((2 * pi * (seq(1, 40, 1) - 8 + 30 / 4)) / 30),
y_err = rep(0.1, 40)
)
model <- data.frame(X = seq(1.5, 39.5, 1),
Y = cbind(seq(1, 39, 1), 0.9 * sin((2 * pi * (seq(1, 39, 1) - 9 + 25 / 4)) / 25))
)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - y_err, # Add error bars on measurement (1 SD)
ymax = y + y_err0.5,
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - x_err,
xmax = x + x_err),
height = 0.1,
col = "black")
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - y_err, # Add error bars on measurement (1 SD)
ymax = y + y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - x_err,
xmax = x + x_err),
height = 0.1,
col = "black")
plot(datplot)
# Create dummy data for input
input <- data.frame(x = seq(1, 40, 1),
x_err = rep(0.3, 40),
y = sin((2 * pi * (seq(1, 40, 1) - 8 + 30 / 4)) / 30),
y_err = rep(0.1, 40)
)
model <- data.frame(X = seq(1.5, 39.5, 1),
Y = cbind(seq(1, 39, 1), 0.9 * sin((2 * pi * (seq(1, 39, 1) - 9 + 25 / 4)) / 25))
)
# Plot input data
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black")
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)")
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
model <- data.frame(X = seq(1.5, 39.5, 1),
Y = 0.9 * sin((2 * pi * (seq(1, 39, 1) - 9 + 25 / 4)) / 25))
)
model <- data.frame(X = seq(1.5, 39.5, 1),
Y = 0.9 * sin((2 * pi * (seq(1, 39, 1) - 9 + 25 / 4)) / 25))
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red", size = 2))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red", size = 1.5))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red", size = 1.1))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red", size = 1))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red", size = 0.5))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red", size = 0.2))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red")) +
ggplot2::geom_line()
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red")) +
ggplot2::geom_line(data = model, col = "red")
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red")) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
model <- data.frame(X = seq(0.5, 39.5, 1),
Y = 0.9 * sin((2 * pi * (seq(1, 40, 1) - 9 + 25 / 4)) / 25)
)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y, col = "red")) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y, col = "red"))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y, col = "red", size = 2))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y, col = "red", size = 1.5))
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y, col = "red"), size = 2)
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value") +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y), col = "red", size = 2)
plot(datplot)
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (1 SD)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Plot showing input data (black) and model data (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
plot(datplot)
xmat <- matrix(rnorm(MC * length(x)), nrow = length(x)) * x_err + matrix(rep(x, MC), nrow = length(x)) # Create matrix of simulated X values
ymat <- matrix(rnorm(MC * length(y)), nrow = length(y)) * y_err + matrix(rep(y, MC), nrow = length(y)) # Create matrix of simulated Y values
Xarray <- sqrt( # create array of the length of vectors connecting each MC simulated x-y pair and each modelled X-Y pair.
((outer(xmat, X, FUN = "-") - mean(outer(xmat, X, FUN = "-"))) / sd(outer(xmat, X, FUN = "-"))) ^ 2 + # Square of the normalized difference between MC-simulated X values and modelled D
((outer(ymat, Y[, 2], FUN = "-") - mean(outer(ymat, Y[, 2], FUN = "-"))) / sd(outer(ymat, Y[, 2], FUN = "-"))) ^ 2 # Square of the normalized difference between MC-simulated y values and modelled Y values
)
posmat <- apply(Xarray, c(1,2), which.min) # For each MC-simulated x-y pair, find the position of the closest model value
Xsimmat <- matrix(X[posmat], nrow = length(x)) # Find the X value that belongs to each position in posmat
X_err_comb <- apply(Xsimmat, 1, sd) # calculate the standard deviation in X domain resulting from orthogonal projection of errors on X and Y from variability within the X values
MC = 1000
xmat <- matrix(rnorm(MC * length(x)), nrow = length(x)) * x_err + matrix(rep(x, MC), nrow = length(x)) # Create matrix of simulated X values
ymat <- matrix(rnorm(MC * length(y)), nrow = length(y)) * y_err + matrix(rep(y, MC), nrow = length(y)) # Create matrix of simulated Y values
Xarray <- sqrt( # create array of the length of vectors connecting each MC simulated x-y pair and each modelled X-Y pair.
((outer(xmat, X, FUN = "-") - mean(outer(xmat, X, FUN = "-"))) / sd(outer(xmat, X, FUN = "-"))) ^ 2 + # Square of the normalized difference between MC-simulated X values and modelled D
((outer(ymat, Y[, 2], FUN = "-") - mean(outer(ymat, Y[, 2], FUN = "-"))) / sd(outer(ymat, Y[, 2], FUN = "-"))) ^ 2 # Square of the normalized difference between MC-simulated y values and modelled Y values
)
posmat <- apply(Xarray, c(1,2), which.min) # For each MC-simulated x-y pair, find the position of the closest model value
Xsimmat <- matrix(X[posmat], nrow = length(x)) # Find the X value that belongs to each position in posmat
X_err_comb <- apply(Xsimmat, 1, sd) # calculate the standard deviation in X domain resulting from orthogonal projection of errors on X and Y from variability within the X values
View(posmat)
View(Xsimmat)
Ysimmat <- matrix(Y[posmat, 2], nrow = length(y)) # Find the X value that belongs to each position in posmat
View(Ysimmat)
Y_err_comb <- apply(Ysimmat, 1, sd) # calculate the standard deviation in Y domain resulting from orthogonal projection of errors on X and Y from variability within the X values
Xsimmat <- matrix(X[posmat], nrow = length(x)) # Find the X value that belongs to each position in posmat
X_comb <- apply(Xsimmat, 1, mean) # calculate the mean value in X domain resulting from orthogonal projection of errors on X and Y from variability within the X values
Ysimmat <- matrix(Y[posmat, 2], nrow = length(y)) # Find the Y value that belongs to each position in posmat
Y_comb <- apply(Ysimmat, 1, mean) # calculate the mean value in Y domain resulting from orthogonal projection of errors on X and Y from variability within the X values
X_err_comb <- apply(Xsimmat, 1, sd) # calculate the standard deviation in X domain resulting from orthogonal projection of errors on X and Y from variability within the X values
Y_err_comb <- apply(Ysimmat, 1, sd) # calculate the standard deviation in Y domain resulting from orthogonal projection of errors on X and Y from variability within the X values
View(input)
result <- data.frame(
X = X_comb,
X_err = X_err_comb,
Y = Y_comb,
Y_err = Y_err_comb
)
View(result)
rm(list=ls())
input <- data.frame(x = seq(1, 40, 1),
x_err = rep(0.3, 40),
y = sin((2 * pi * (seq(1, 40, 1) - 8 + 30 / 4)) / 30),
y_err = rep(0.1, 40)
)
model <- data.frame(X = seq(0.5, 39.5, 1),
Y = 0.9 * sin((2 * pi * (seq(1, 40, 1) - 9 + 25 / 4)) / 25)
)
# Run function
result <- MCerr_orth(x, x_err, y, y_err, X, Y, 1000)
result <- MCerr_orth(input$x, input$x_err, input$y, input$y_err, model$X, model$Y, 1000)
rm(list=ls())
devtools::install()
