summarize(
N = n(),
D = median(D, na.rm = TRUE),
d18Oc = median(d18Oc, na.rm = TRUE),
YEARMARKER = max(YEARMARKER, na.rm = TRUE),
d18Oc_err = sqrt(sum(d18Oc_err ^ 2, na.rm = TRUE)),
D_err = sqrt(sum(D_err ^ 2, na.rm = TRUE)) / N
)
print("WARNING: Duplicated depth values were found and the median values were used")
}
# Define sliding window based on indicated year markers
YEARMARKER <- which(input_object$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(input_object$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
if(length(yearwindow) > 1){
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modeling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modeling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot<-which(dynwindow$x + dynwindow$y > length(input_object[,1])) # Find windows that overshoot the length of dat
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
dynwindow$y <- dynwindow$y[-overshoot] # Remove overshooting windows
if((length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1) < length(input_object[, 1])){ # Increase length of the final window in case samples at the end are missed due to jumps in window size
dynwindow$y[length(dynwindow$y)] <- dynwindow$y[length(dynwindow$y)] + (length(input_object[, 1]) - (length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1))
}
}else if(length(yearwindow) == 1){ # Catch exception of datasets with only two yearmarkers
dynwindow <- data.frame(
x = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1),
y = rep(yearwindow, (length(input_object$D) - yearwindow[length(yearwindow)] + 1))
)
}else{
return("ERROR: Need at least 2 year markers to estimate window size")
}
return(list(input_object,dynwindow))
}
test <- data_import_object(input_object)
data_import_object <- function(input_object){
# If correct headers are included in the object, the column names don't need to be set
# cols <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
# colnames(dat) <- cols[1:length(dat[1, ])] # Give column names
# WARNING: It is important that the columns in the datafile have the same meaning as defined here.
# If one of the error terms (e.g. the error on the depth measurement: "D_err") is missing, it can also be added to the datafile as a column filled with zeroes (indicating the error is 0)
# Check the structure and names of the import dataframe
# Check if all 5 used columns are present
if(!all(c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err") %in% colnames(input_object))){
# Check if the three basic columns (without the SDs) are present
if(!all(c("D", "d18Oc", "YEARMARKER") %in% colnames(input_object))){
return(paste("ERROR: Input data lacks columns:", # If the three minimum requisite columns are not present, break operation
c("D", "d18Oc", "YEARMARKER")[
which(!(c("D", "d18Oc", "YEARMARKER") %in% colnames(input_object)))
]
)
)
}else{
# If three basic columns are present, but error columns are missing, set errors to zero
if(!("D_err" %in% colnames(input_object))){
input_object$D_err <- rep(0, nrow(input_object))
print("WARNING: D error not found, set to zero")
}
if(!("d18Oc_err" %in% colnames(input_object))){
input_object$d18Oc_err <- rep(0, nrow(input_object))
print("WARNING: d18Oc error not found, set to zero")
}
}
} # No action is required if all columns are present
input_object <- input_object[order(input_object$D), ] # Order data by D
# Check for duplicate depth values and average them out
if(TRUE %in% duplicated(input_object$D)){
input_object <- input_object %>%
group_by(D) %>%
summarize(
N = n(),
D = median(D, na.rm = TRUE),
d18Oc = median(d18Oc, na.rm = TRUE),
YEARMARKER = max(YEARMARKER, na.rm = TRUE),
d18Oc_err = sqrt(sum(d18Oc_err ^ 2, na.rm = TRUE)),
D_err = sqrt(sum(D_err ^ 2, na.rm = TRUE)) / N
)
print("WARNING: Duplicated depth values were found and the median values were used")
}
# Define sliding window based on indicated year markers
YEARMARKER <- which(input_object$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(input_object$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
if(length(yearwindow) > 1){
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modeling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modeling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot<-which(dynwindow$x + dynwindow$y > length(input_object[,1])) # Find windows that overshoot the length of dat
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
dynwindow$y <- dynwindow$y[-overshoot] # Remove overshooting windows
if((length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1) < length(input_object[, 1])){ # Increase length of the final window in case samples at the end are missed due to jumps in window size
dynwindow$y[length(dynwindow$y)] <- dynwindow$y[length(dynwindow$y)] + (length(input_object[, 1]) - (length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1))
}
}else if(length(yearwindow) == 1){ # Catch exception of datasets with only two yearmarkers
dynwindow <- data.frame(
x = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1),
y = rep(yearwindow, (length(input_object$D) - yearwindow[length(yearwindow)] + 1))
)
}else{
return("ERROR: Need at least 2 year markers to estimate window size")
}
return(list(input_object,dynwindow))
}
test <- data_import_object(input_object)
input_object <- input_object[order(input_object$D), ] # Order data by D
# Check for duplicate depth values and average them out
if(TRUE %in% duplicated(input_object$D)){
input_object <- input_object %>%
group_by(D) %>%
summarize(
N = n(),
D = median(D, na.rm = TRUE),
d18Oc = median(d18Oc, na.rm = TRUE),
YEARMARKER = max(YEARMARKER, na.rm = TRUE),
d18Oc_err = sqrt(sum(d18Oc_err ^ 2, na.rm = TRUE)),
D_err = sqrt(sum(D_err ^ 2, na.rm = TRUE)) / N
)
print("WARNING: Duplicated depth values were found and the median values were used")
}
View(input_object)
YEARMARKER <- which(input_object$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(input_object$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modeling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modeling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
View(dynwindow)
dynwindow
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
dynwindow
overshoot <- which(dynwindow$x + dynwindow$y > length(input_object[, 1])) # Find windows that overshoot the length of dat
overshoot
View(input_object)
dat <- input_object
# Check the structure of the import dataframe
if(ncol(dat) == 5){ # If the number of columns checks out
# Check the column names, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
}
}else if(ncol(dat) == 3){ # If SD columns are omitted
# Check the names of provided columns, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER")
}
dat$D_err <- rep(0, nrow(dat))
dat$d18Oc_err <- rep(0, nrow(dat))
}else{
return("ERROR: Input data does not match the default input data format")
}
dat <- input_object[, -2]
if(ncol(dat) == 5){ # If the number of columns checks out
# Check the column names, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
}
}else if(ncol(dat) == 3){ # If SD columns are omitted
# Check the names of provided columns, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER")
}
dat$D_err <- rep(0, nrow(dat))
dat$d18Oc_err <- rep(0, nrow(dat))
}else{
return("ERROR: Input data does not match the default input data format")
}
# Check for duplicate depth values
if(TRUE %in% duplicated(dat$D)){
dat <- dat[-which(duplicated(dat$D) == TRUE), ] # Remove duplicated depth values
print("WARNING: Duplicated depth values were found and removed")
}
View(dat)
YEARMARKER <- which(dat$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(dat$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
dynwindow
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modeling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(dat$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modeling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot<-which(dynwindow$x + dynwindow$y > length(dat[,1])) # Find windows that overshoot the length of dat
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
overshoot
dynwindow
View(SG113sg)
SG113sg <- SG113sg[, c(1, 2, 4,5, 3)]
SG113sg <- SG113sg[, c(1, 2, 4, 3, 5)]
wrap_function(
path = "E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/",
input_from_file = FALSE, # Should input be read from a file?
object_name = SG113sg, # Name of object with input (only if input_from_file = FALSE)
transfer_function = "KimONeil97", # Set transfer function of the record, default is Kim and O'Neil 1997.
t_int = 1, # Set time interval in days
T_per = 365, # Set annual time period in days (default = 365)
d18Ow = 0, # Set d18Ow value or vector (default = constant year-round at 0 VSMOW). Alternative options are either one value (assumed constant year-round) or a vector with length T_per / t_int and interval t_int specifying d18Ow evolution through one year.
t_maxtemp = 182.5, # Define the day of the year at which temperature is heighest. Default = Assume that the day of maximum temperature is helfway through the year
SCEUApar = c(1, 25, 10000, 5, 0.01, 0.01), # Set parameters for SCEUA optimization (iniflg, ngs, maxn, kstop, pcento, peps)
sinfit = TRUE, # Apply sinusoidal fitting to guess initial parameters for SCEUA optimization? (TRUE/FALSE)
MC = 1000, # Number of MC simulations to include measurement error into error analysis. Default = 1000 (if MC = 0, error on D and d18O measurements not considered)
plot = TRUE, # Should intermediate plots be given to track progress? WARNING: plotting makes the script much slower, especially for long datasets.
plot_export = TRUE, # Should a plot of the results be saved as PDF?
export_raw = FALSE, # Should the results of all individual model runs be exported as CSV files?
export_path = "E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/"
)
test <- data_import_object(SG113sg)
?wrap_function
wrap_function()
wrap_function
object_name <- SG113sg
importlist <- data_import_object(object_name)
warnings()
View(input_object)
# Apply shellchron on species to create chronology based on d18Oc
SG113 <- subset(All_sample_data, Specimen == "SG113" & OUTLIER == FALSE)
SG113sg <- SG113 %>%
select(
D = Sample_nr2,
d18Oc = Final_d18O,
d18Oc_err = d18O_sd_ext
) %>%
mutate(
D = D * 1000,
D_err = 500,
YEARMARKER = 0
)
SG113sg$YEARMARKER[which(SG113sg$D  %in% c(1000, 6000, 13000, 23000))] <- 1 # Add year markers
View(SG113sg)
input_object <- SG113sg
if(!all(c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err") %in% colnames(input_object))){
# Check if the three basic columns (without the SDs) are present
if(!all(c("D", "d18Oc", "YEARMARKER") %in% colnames(input_object))){
return(paste("ERROR: Input data lacks columns:", # If the three minimum requisite columns are not present, break operation
c("D", "d18Oc", "YEARMARKER")[
which(!(c("D", "d18Oc", "YEARMARKER") %in% colnames(input_object)))
]
)
)
}else{
# If three basic columns are present, but error columns are missing, set errors to zero
if(!("D_err" %in% colnames(input_object))){
input_object$D_err <- rep(0, nrow(input_object))
print("WARNING: D error not found, set to zero")
}
if(!("d18Oc_err" %in% colnames(input_object))){
input_object$d18Oc_err <- rep(0, nrow(input_object))
print("WARNING: d18Oc error not found, set to zero")
}
}
} # No action is required if all columns are present
View(input_object)
input_object <- input_object[order(input_object$D), ] # Order data by D
# Check for duplicate depth values and average them out
if(TRUE %in% duplicated(input_object$D)){
input_object <- input_object %>%
group_by(D) %>%
summarize(
N = n(),
D = median(D, na.rm = TRUE),
d18Oc = median(d18Oc, na.rm = TRUE),
YEARMARKER = max(YEARMARKER, na.rm = TRUE),
d18Oc_err = sqrt(sum(d18Oc_err ^ 2, na.rm = TRUE)),
D_err = sqrt(sum(D_err ^ 2, na.rm = TRUE)) / N
)
print("WARNING: Duplicated depth values were found and the median values were used")
}
View(input_object)
YEARMARKER <- which(input_object$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(input_object$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modeling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modeling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
dynwindow
dynwindow$x + dynwindow$y
which(dynwindow$x + dynwindow$y > length(input_object[, 1]))
overshoot <- which((dynwindow$x + dynwindow$y) > length(input_object[, 1]))
length(input_object[, 1]))
length(input_object[, 1])
View(input_object)
length(input_object$D)
overshoot <- which((dynwindow$x + dynwindow$y) > length(input_object$D))
data_import_object <- function(input_object){
# If correct headers are included in the object, the column names don't need to be set
# cols <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
# colnames(dat) <- cols[1:length(dat[1, ])] # Give column names
# WARNING: It is important that the columns in the datafile have the same meaning as defined here.
# If one of the error terms (e.g. the error on the depth measurement: "D_err") is missing, it can also be added to the datafile as a column filled with zeroes (indicating the error is 0)
# Check the structure and names of the import dataframe
# Check if all 5 used columns are present
if(!all(c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err") %in% colnames(input_object))){
# Check if the three basic columns (without the SDs) are present
if(!all(c("D", "d18Oc", "YEARMARKER") %in% colnames(input_object))){
return(paste("ERROR: Input data lacks columns:", # If the three minimum requisite columns are not present, break operation
c("D", "d18Oc", "YEARMARKER")[
which(!(c("D", "d18Oc", "YEARMARKER") %in% colnames(input_object)))
]
)
)
}else{
# If three basic columns are present, but error columns are missing, set errors to zero
if(!("D_err" %in% colnames(input_object))){
input_object$D_err <- rep(0, nrow(input_object))
print("WARNING: D error not found, set to zero")
}
if(!("d18Oc_err" %in% colnames(input_object))){
input_object$d18Oc_err <- rep(0, nrow(input_object))
print("WARNING: d18Oc error not found, set to zero")
}
}
} # No action is required if all columns are present
input_object <- input_object[order(input_object$D), ] # Order data by D
# Check for duplicate depth values and average them out
if(TRUE %in% duplicated(input_object$D)){
input_object <- input_object %>%
group_by(D) %>%
summarize(
N = n(),
D = median(D, na.rm = TRUE),
d18Oc = median(d18Oc, na.rm = TRUE),
YEARMARKER = max(YEARMARKER, na.rm = TRUE),
d18Oc_err = sqrt(sum(d18Oc_err ^ 2, na.rm = TRUE)),
D_err = sqrt(sum(D_err ^ 2, na.rm = TRUE)) / N
)
print("WARNING: Duplicated depth values were found and the median values were used")
}
# Define sliding window based on indicated year markers
YEARMARKER <- which(input_object$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(input_object$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
if(length(yearwindow) > 1){
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modeling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modeling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot <- which((dynwindow$x + dynwindow$y) > length(input_object$D)) # Find windows that overshoot the length of data
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
dynwindow$y <- dynwindow$y[-overshoot] # Remove overshooting windows
if((length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1) < length(input_object$D)){ # Increase length of the final window in case samples at the end are missed due to jumps in window size
dynwindow$y[length(dynwindow$y)] <- dynwindow$y[length(dynwindow$y)] + (length(input_object$D) - (length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1))
}
}else if(length(yearwindow) == 1){ # Catch exception of datasets with only two yearmarkers
dynwindow <- data.frame(
x = 1:(length(input_object$D) - yearwindow[length(yearwindow)] + 1),
y = rep(yearwindow, (length(input_object$D) - yearwindow[length(yearwindow)] + 1))
)
}else{
return("ERROR: Need at least 2 year markers to estimate window size")
}
return(list(input_object,dynwindow))
}
test <- data_import_object(SG113sg)
test
rm(list=ls())
devtools::document()
devtools::install()
require(ShellChron)
data_import_object()
data_import_object
devtools::document()
devtools::install()
require(ShellChron)
data_import
data_import_ob
data_import_object
require(tidyverse)
require(ShellChron)
All_sample_data <- read.csv("E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/PWP_sample_data.csv")
# Extract sample numbers and take average for pooled samples
All_sample_data$Sample_nr2 <- NA
for(i in 1:nrow(All_sample_data)){
if(!is.na(as.numeric(All_sample_data$Sample_nr[i]))){
# If sample is a single-number sample, just return the sample number
All_sample_data$Sample_nr2[i] <- as.numeric(All_sample_data$Sample_nr[i])
} else if(!is_empty(grep(";", All_sample_data$Sample_nr[i]))){
# Find instances of multiple sample numbers separated by semicolons
# Return the average of the pooled sample numbers
All_sample_data$Sample_nr2[i] <- mean(as.numeric(strsplit(All_sample_data$Sample_nr[i], ";")[[1]]))
} else if(!is_empty(grep("-", All_sample_data$Sample_nr[i]))){
# Find instances of a range of sample numbers separated by a dash
# Return the average of the pooled sample numbers
All_sample_data$Sample_nr2[i] <- mean(as.numeric(strsplit(All_sample_data$Sample_nr[i], "-")[[1]]))
}
}
# Apply shellchron on species to create chronology based on d18Oc
SG113 <- subset(All_sample_data, Specimen == "SG113" & OUTLIER == FALSE)
SG113sg <- SG113 %>%
select(
D = Sample_nr2,
d18Oc = Final_d18O,
d18Oc_err = d18O_sd_ext
) %>%
mutate(
D = D * 1000,
D_err = 500,
YEARMARKER = 0
)
SG113sg$YEARMARKER[which(SG113sg$D  %in% c(1000, 6000, 13000, 23000))] <- 1 # Add year markers
View(SG113sg)
require(ShellChron)
require(tidyverse)
require(ShellChron)
All_sample_data <- read.csv("E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/PWP_sample_data.csv")
# Extract sample numbers and take average for pooled samples
All_sample_data$Sample_nr2 <- NA
for(i in 1:nrow(All_sample_data)){
if(!is.na(as.numeric(All_sample_data$Sample_nr[i]))){
# If sample is a single-number sample, just return the sample number
All_sample_data$Sample_nr2[i] <- as.numeric(All_sample_data$Sample_nr[i])
} else if(!is_empty(grep(";", All_sample_data$Sample_nr[i]))){
# Find instances of multiple sample numbers separated by semicolons
# Return the average of the pooled sample numbers
All_sample_data$Sample_nr2[i] <- mean(as.numeric(strsplit(All_sample_data$Sample_nr[i], ";")[[1]]))
} else if(!is_empty(grep("-", All_sample_data$Sample_nr[i]))){
# Find instances of a range of sample numbers separated by a dash
# Return the average of the pooled sample numbers
All_sample_data$Sample_nr2[i] <- mean(as.numeric(strsplit(All_sample_data$Sample_nr[i], "-")[[1]]))
}
}
# Apply shellchron on species to create chronology based on d18Oc
SG113 <- subset(All_sample_data, Specimen == "SG113" & OUTLIER == FALSE)
SG113sg <- SG113 %>%
select(
D = Sample_nr2,
d18Oc = Final_d18O,
d18Oc_err = d18O_sd_ext
) %>%
mutate(
D = D * 1000,
D_err = 500,
YEARMARKER = 0
)
SG113sg$YEARMARKER[which(SG113sg$D  %in% c(1000, 6000, 13000, 23000))] <- 1 # Add year markers
test <- data_import_object(SG113sg)
dat <- test[[1]]
View(dat)
dw <- test[[2]]
dw
wrap_function(
path = "E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/",
input_from_file = FALSE, # Should input be read from a file?
object_name = SG113sg, # Name of object with input (only if input_from_file = FALSE)
transfer_function = "KimONeil97", # Set transfer function of the record, default is Kim and O'Neil 1997.
t_int = 1, # Set time interval in days
T_per = 365, # Set annual time period in days (default = 365)
d18Ow = 0, # Set d18Ow value or vector (default = constant year-round at 0 VSMOW). Alternative options are either one value (assumed constant year-round) or a vector with length T_per / t_int and interval t_int specifying d18Ow evolution through one year.
t_maxtemp = 182.5, # Define the day of the year at which temperature is heighest. Default = Assume that the day of maximum temperature is helfway through the year
SCEUApar = c(1, 25, 10000, 5, 0.01, 0.01), # Set parameters for SCEUA optimization (iniflg, ngs, maxn, kstop, pcento, peps)
sinfit = TRUE, # Apply sinusoidal fitting to guess initial parameters for SCEUA optimization? (TRUE/FALSE)
MC = 1000, # Number of MC simulations to include measurement error into error analysis. Default = 1000 (if MC = 0, error on D and d18O measurements not considered)
plot = TRUE, # Should intermediate plots be given to track progress? WARNING: plotting makes the script much slower, especially for long datasets.
plot_export = TRUE, # Should a plot of the results be saved as PDF?
export_raw = FALSE, # Should the results of all individual model runs be exported as CSV files?
export_path = "E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/"
)
path = "E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/"
input_from_file = FALSE # Should input be read from a file?
object_name = SG113sg # Name of object with input (only if input_from_file = FALSE)
transfer_function = "KimONeil97" # Set transfer function of the record, default is Kim and O'Neil 1997.
t_int = 1 # Set time interval in days
T_per = 365 # Set annual time period in days (default = 365)
d18Ow = 0 # Set d18Ow value or vector (default = constant year-round at 0 VSMOW). Alternative options are either one value (assumed constant year-round) or a vector with length T_per / t_int and interval t_int specifying d18Ow evolution through one year.
t_maxtemp = 182.5 # Define the day of the year at which temperature is heighest. Default = Assume that the day of maximum temperature is helfway through the year
SCEUApar = c(1, 25, 10000, 5, 0.01, 0.01) # Set parameters for SCEUA optimization (iniflg, ngs, maxn, kstop, pcento, peps)
sinfit = TRUE # Apply sinusoidal fitting to guess initial parameters for SCEUA optimization? (TRUE/FALSE)
MC = 1000 # Number of MC simulations to include measurement error into error analysis. Default = 1000 (if MC = 0, error on D and d18O measurements not considered)
plot = TRUE # Should intermediate plots be given to track progress? WARNING: plotting makes the script much slower, especially for long datasets.
plot_export = TRUE # Should a plot of the results be saved as PDF?
export_raw = FALSE # Should the results of all individual model runs be exported as CSV files?
export_path = "E:/Dropbox/Research/postdoc/UNBIAS/PWP reconstructions/Combined_data/"
if(input_from_file){
setwd(path)
importlist <- data_import(file_name)
}else{
importlist <- data_import_object(object_name)
}
if(length(importlist) != 2){ # Catch errors in the input data
return("ERROR: Input data does not match the default input data format")
}
dat <- importlist[[1]]
dynwindow <- importlist[[2]]
devtools::document()
devtools::install()
