Tstats$se.SST <- Tstats$sd.SST / sqrt(Tstats$N) # Propagate new errors onto standard error
Tstats$CL95.SST <- qt(0.95, Tstats$N) * Tstats$se.SST # Propagate new errors onto confidence interval
print("Preparing plots")
}
if(plot == TRUE | plot_export == TRUE){ # Check if plots are needed
# Create depth-time plot
Dtplot <- ggplot2::ggplot(JDtidy, ggplot2::aes(D, Day)) +
ggplot2::geom_point(ggplot2::aes(colour = d18Oc)) +
ggplot2::scale_colour_gradient2(midpoint = mean(JDtidy$d18Oc)) +
ggplot2::geom_line(data = JDstats, ggplot2::aes(D, mean.day), size = 1) +
ggplot2::geom_line(data = JDstats, ggplot2::aes(D, mean.day + CL95.day), size = 1, alpha = 0.5) +
ggplot2::geom_line(data = JDstats, ggplot2::aes(D, mean.day - CL95.day), size = 1, alpha = 0.5) +
ggplot2::ggtitle("Plot of Height vs. Time") +
xlab("Record length") +
ggplot2::scale_y_continuous("Age (days)", seq(0, 365 * ceiling(max(JDstats$mean.day + JDstats$CL95.day, na.rm = TRUE) / 365), 365))
# Create d18O plot
d18Oplot <- ggplot2::ggplot(d18Otidy, ggplot2::aes(D, d18Oc)) +
ggplot2::geom_point() +
ggplot2::geom_line(data = d18Ostats, ggplot2::aes(D, mean.d18O_mod), size = 1) +
ggplot2::geom_line(data = d18Ostats, ggplot2::aes(D, mean.d18O_mod + CL95.d18O_mod, alpha = 0.5, col = "darkblue"), size = 1) +
ggplot2::geom_line(data = d18Ostats, ggplot2::aes(D, mean.d18O_mod - CL95.d18O_mod, alpha = 0.5, col = "darkred"), size = 1) +
ggplot2::ggtitle("Plot of measured and modelled d18O vs. Record Length") +
xlab("Record length") +
ylab("d18O_carbonate") +
ggplot2::theme(legend.position = "none") # Remove legend
# Create growth rate plot
GRplot <- ggplot2::ggplot(GRtidy, ggplot2::aes(D, GR)) +
ggplot2::geom_point(ggplot2::aes(colour = d18Oc)) +
ggplot2::scale_colour_gradient2(midpoint = mean(JDtidy$d18Oc)) +
ggplot2::geom_line(data = GRstats, ggplot2::aes(D, mean.GR), size = 1) +
ggplot2::geom_line(data = GRstats, ggplot2::aes(D, mean.GR + CL95.GR, alpha = 0.5), size = 1) +
ggplot2::geom_line(data = GRstats, ggplot2::aes(D, mean.GR - CL95.GR, alpha = 0.5), size = 1) +
ggplot2::ggtitle("Plot of modelled growth rate vs Record Length") +
xlab("Record length") +
ylab("Growth rate") +
ggplot2::theme(legend.position = "none") # Remove legend
Combined_plots <- ggpubr::ggarrange(Dtplot, d18Oplot, GRplot, labels = c("A", "B", "C"), ncol = 3, nrow = 1) # Combine plots
if(plot == TRUE){
dev.new()
print(Combined_plots)
}
if(plot_export == TRUE){
pdf("Model result plots.pdf", width = 30, height = 10)
print(Combined_plots)
dev.off()
}
}
print("Start exporting files to directory")
if(export_raw == TRUE){
# Write away all raw results of modelling
write.csv(resultarray[, , 1], "modelled_d18O_raw.csv")
write.csv(resultarray[, , 2], "residuals_raw.csv")
write.csv(resultarray[, , 3], "Day_of_year_raw.csv")
write.csv(resultarray[, , 4], "Instantaneous_growth_rate_raw.csv")
write.csv(resultarray[, , 5], "SST_raw.csv")
write.csv(resultarray[, , 6], "Modelled_d18O_SD_raw.csv")
write.csv(resultarray[, , 7], "Day_of_Year_SD_raw.csv")
write.csv(resultarray[, , 8], "Instantaneous_growth_rate_SD_raw.csv")
write.csv(resultarray[, , 9], "SST_SD_raw.csv")
write.csv(parmat, "modelled_parameters_raw.csv")
}
# Write avay summary statistics of modelling
write.csv(JDstats, "Age_model_results.csv")
write.csv(d18Ostats, "d18O_model_results.csv")
write.csv(GRstats, "Growth_rate_results.csv")
write.csv(Tstats, "SST_results.csv")
write.csv(parstats, "Model_parameter_results.csv")
print("DONE!")
}
test <- Export_results(dat, testarray, parmat, MC = 1000, dynwindow, plot = FALSE, plot_export = FALSE, export_raw = FALSE)
sd.wt<-function(x, w, na.rm = FALSE){ # Formula for weighted standard deviation
if(na.rm == TRUE){ # Remove NA containing x/w pairs
x<-x[!(is.na(x) | is.na(w))]
w<-w[!(is.na(x) | is.na(w))]
}
mean.wt <- mean(x * w, na.rm = TRUE) / mean(w) # Calculate weighted mean
stdev <- sqrt(sum(w * (x - mean.wt) ^ 2) / ((length(w) - 1) / length(w) * sum(w)))
return(stdev)
}
test <- Export_results(dat, testarray, parmat, MC = 1000, dynwindow, plot = FALSE, plot_export = FALSE, export_raw = FALSE)
rownames(parmat) <- c("G_amp", "G_per", "G_pha", "G_av", "G_skw", "T_amp", "T_per", "T_pha", "T_av")
rownames(parmat) <- c("T_amp", "T_pha", "T_av", "G_amp", "G_pha", "G_av", "G_skw")
test <- Export_results(dat, testarray, parmat, MC = 1000, dynwindow, plot = FALSE, plot_export = FALSE, export_raw = FALSE)
devtools::document()
devtools::install()
?Export_results
?growthmodel
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_3/20201012.RData")
timetrack
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_3" # For Home PC (both)
setwd(path)
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
require(ShellChron)
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
require(tidyverse)
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
?Export_results
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_3/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_3"
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
setwd(path)
# STEP 4: Order and export results and statistics
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_3/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_3" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_3" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_4/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_4" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_4" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_5/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_5" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_5" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_6/20201011.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_6" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_6" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_7/20201011.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_7" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_8/20201011.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_8" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_9/20201011.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_9" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_10/20201010.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_10" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_11/20201010.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_11" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_HR_12/29201010.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_12" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_4/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_4" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_5/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_5" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_5" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_6/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_6" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_7/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_7" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_7" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_8/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_8" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_9/20201012.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_9" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_10/20201011.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_10" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_11/20201011.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_11" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
load("E:/Dropbox/Research/Manuscripts/Bivalve age model/Case1_LR_12/20201009.RData")
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_12" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
?MCerr_orth
require(ShellChron)
?MCerr_orth
# STEP 0: Set parameters
starttime <- Sys.time()
require(ShellChron)
# Input details on records
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_6" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_6" # For laptop
setwd(path)
file_name <- "Case1_HR_6.csv" # Give file name (don't forget to add the extention, should be in CSV format)
mineral <- "calcite" # Set mineralogy of the record
t_int <- 1 # Set time interval in days
G_per <- T_per <- 365 # Set annual time period in days (default = 365)
# Texel_data <- read.csv("Texel_daily_data.csv", header = T)
# d18Ow <- read.csv("d18Osw.csv", header = FALSE)$V1 # Create d18Ow vector for one year (default = all zero)
# d18Ow <- Texel_data$d18Osw
d18Ow <- 0
t_maxtemp <- 182.5 # Assume taht the day of maximum temperature is halfway through the year.
MC <- 1000
agecorrection <- FALSE
plot <- TRUE
plot_export <- TRUE
export_raw <- TRUE
endtime <- Sys.time()
timetrack <- endtime - starttime
# STEP 1: Import data
starttime <- Sys.time()
setwd(path)
importlist <- data_import(file_name)
dat <- importlist[[1]]
dynwindow <- importlist[[2]]
G_per <- T_per # Period of growth rate sinusoid should equal that of the temperature sinusoid (which is given)
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 2: Run the model
starttime <- Sys.time()
resultlist <- Run_model(dat, dynwindow, mineral, d18Ow, T_per, G_per, t_int, t_maxtemp, MC, agecorrection, plot = TRUE)
resultarray <- resultlist[[1]]
parmat <- resultlist[[2]]
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 3: Align model results to cumulative timescale
starttime <- Sys.time()
suppressWarnings(resultarray[, , 3] <- CumDY2(resultarray, TRUE, TRUE)) # Calculate cumulative day of the year for all model runs and replace matrix in result array
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
save.image(file = "20201012.RData")
timetrack
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
require(ShellChron)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
require(tidyverse)
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
# STEP 0: Set parameters
starttime <- Sys.time()
require(ShellChron)
# Input details on records
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_3" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_HR_3" # For laptop
setwd(path)
file_name <- "Case1_HR_3.csv" # Give file name (don't forget to add the extention, should be in CSV format)
mineral <- "calcite" # Set mineralogy of the record
t_int <- 1 # Set time interval in days
G_per <- T_per <- 365 # Set annual time period in days (default = 365)
# Texel_data <- read.csv("Texel_daily_data.csv", header = T)
# d18Ow <- read.csv("d18Osw.csv", header = FALSE)$V1 # Create d18Ow vector for one year (default = all zero)
# d18Ow <- Texel_data$d18Osw
d18Ow <- 0
t_maxtemp <- 182.5 # Assume taht the day of maximum temperature is halfway through the year.
MC <- 1000
agecorrection <- FALSE
plot <- TRUE
plot_export <- TRUE
export_raw <- TRUE
endtime <- Sys.time()
timetrack <- endtime - starttime
# STEP 1: Import data
starttime <- Sys.time()
setwd(path)
importlist <- data_import(file_name)
dat <- importlist[[1]]
dynwindow <- importlist[[2]]
G_per <- T_per # Period of growth rate sinusoid should equal that of the temperature sinusoid (which is given)
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 2: Run the model
starttime <- Sys.time()
resultlist <- Run_model(dat, dynwindow, mineral, d18Ow, T_per, G_per, t_int, t_maxtemp, MC, agecorrection, plot = TRUE)
resultarray <- resultlist[[1]]
parmat <- resultlist[[2]]
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 3: Align model results to cumulative timescale
starttime <- Sys.time()
suppressWarnings(resultarray[, , 3] <- CumDY2(resultarray, TRUE, TRUE)) # Calculate cumulative day of the year for all model runs and replace matrix in result array
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
save.image(file = "20201014.RData")
# STEP 4: Order and export results and statistics
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
# STEP 0: Set parameters
starttime <- Sys.time()
require(ShellChron)
# Input details on records
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_7" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_7" # For laptop
setwd(path)
file_name <- "Case1_LR_7.csv" # Give file name (don't forget to add the extention, should be in CSV format)
mineral <- "calcite" # Set mineralogy of the record
t_int <- 1 # Set time interval in days
G_per <- T_per <- 365 # Set annual time period in days (default = 365)
# Texel_data <- read.csv("Texel_daily_data.csv", header = T)
# d18Ow <- read.csv("d18Osw.csv", header = FALSE)$V1 # Create d18Ow vector for one year (default = all zero)
# d18Ow <- Texel_data$d18Osw
d18Ow <- 0
t_maxtemp <- 182.5 # Assume taht the day of maximum temperature is halfway through the year.
MC <- 1000
agecorrection <- FALSE
plot <- TRUE
plot_export <- TRUE
export_raw <- TRUE
endtime <- Sys.time()
timetrack <- endtime - starttime
# STEP 1: Import data
starttime <- Sys.time()
setwd(path)
importlist <- data_import(file_name)
dat <- importlist[[1]]
dynwindow <- importlist[[2]]
G_per <- T_per # Period of growth rate sinusoid should equal that of the temperature sinusoid (which is given)
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 2: Run the model
starttime <- Sys.time()
resultlist <- Run_model(dat, dynwindow, mineral, d18Ow, T_per, G_per, t_int, t_maxtemp, MC, agecorrection, plot = TRUE)
resultarray <- resultlist[[1]]
parmat <- resultlist[[2]]
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 3: Align model results to cumulative timescale
starttime <- Sys.time()
suppressWarnings(resultarray[, , 3] <- CumDY2(resultarray, TRUE, TRUE)) # Calculate cumulative day of the year for all model runs and replace matrix in result array
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
save.image(file = "20201014.RData")
# STEP 4: Order and export results and statistics
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
# STEP 0: Set parameters
starttime <- Sys.time()
require(ShellChron)
# Input details on records
path <- "E://Dropbox//Research//Manuscripts//Bivalve age model//Case1_LR_6" # For Home PC (both)
#path <- "C://Users//niels//Dropbox//Research//postdoc//Side projects//Bivalve age model//Rdil4a_results" # For laptop
setwd(path)
file_name <- "Case1_LR_6.csv" # Give file name (don't forget to add the extention, should be in CSV format)
mineral <- "calcite" # Set mineralogy of the record
t_int <- 1 # Set time interval in days
G_per <- T_per <- 365 # Set annual time period in days (default = 365)
# Texel_data <- read.csv("Texel_daily_data.csv", header = T)
# d18Ow <- read.csv("d18Osw.csv", header = FALSE)$V1 # Create d18Ow vector for one year (default = all zero)
# d18Ow <- Texel_data$d18Osw
d18Ow <- 0
t_maxtemp <- 182.5 # Assume taht the day of maximum temperature is halfway through the year.
MC <- 1000
agecorrection <- FALSE
plot <- TRUE
plot_export <- TRUE
export_raw <- TRUE
endtime <- Sys.time()
timetrack <- endtime - starttime
# STEP 1: Import data
starttime <- Sys.time()
setwd(path)
importlist <- data_import(file_name)
dat <- importlist[[1]]
dynwindow <- importlist[[2]]
G_per <- T_per # Period of growth rate sinusoid should equal that of the temperature sinusoid (which is given)
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 2: Run the model
starttime <- Sys.time()
resultlist <- Run_model(dat, dynwindow, mineral, d18Ow, T_per, G_per, t_int, t_maxtemp, MC, agecorrection, plot = TRUE)
resultarray <- resultlist[[1]]
parmat <- resultlist[[2]]
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
# STEP 3: Align model results to cumulative timescale
starttime <- Sys.time()
suppressWarnings(resultarray[, , 3] <- CumDY2(resultarray, TRUE, TRUE)) # Calculate cumulative day of the year for all model runs and replace matrix in result array
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
save.image(file = "20201014.RData")
# STEP 4: Order and export results and statistics
starttime <- Sys.time()
Export_results(dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
endtime <- Sys.time()
timetrack <- append(timetrack, endtime - starttime)
write.csv(timetrack, "timetrack.csv")
devtools::check()
