dplyr::summarize(
mean = mean(abs(dt), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dt), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dt), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
D18Ostats_ShellChron <- D18O_ShellChron[complete.cases(D18O_ShellChron), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dO), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dO), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dO), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
# ------------------------------------------------------------------------------
# Plot results of performance time test
# Create plot of accuracy of cumulative model vs. number of modelled years
# Add numeric years and HR/LR record to Dt dataframes
Dt_cumstats_Judd$years <- as.numeric(sapply(Dt_cumstats_Judd$record, substring, first = 4))
Dt_cumstats_Judd$res <- sapply(Dt_cumstats_Judd$record, substring, first = 1, last = 2)
Dt_cumstats_ShellChron$years <- as.numeric(sapply(Dt_cumstats_ShellChron$record, substring, first = 4))
Dt_cumstats_ShellChron$res <- sapply(Dt_cumstats_ShellChron$record, substring, first = 1, last = 2)
accplot <- ggplot(data = Dt_cumstats_Judd, aes(years, mean)) +
geom_point(aes(col = res)) +
geom_line(aes(col = res), linetype = "dashed", size = 1) +
geom_errorbar(aes(x = years, ymin = mean - CL95, ymax = mean + CL95, col = res), width = 0.3) +
geom_point(data = Dt_cumstats_ShellChron, aes(col = res)) +
geom_line(data = Dt_cumstats_ShellChron, aes(col = res), size = 1) +
geom_errorbar(data = Dt_cumstats_ShellChron, aes(x = years, ymin = mean - CL95, ymax = mean + CL95, col = res), width = 0.3) +
scale_y_log10("offset from actual age (d)", breaks = c(seq(1, 10, 1), seq(20, 100, 10), seq(200, 1000, 100))) +
scale_x_continuous("Length of record (yr)", breaks = seq(3, 12, 1)) +
scale_colour_brewer(palette = "Paired")
pdf("Accuracy_comparison_plot.pdf", height = 5, width = 5)
plot(accplot)
dev.off()
# Plot duration of modelling against record
# Extract years and record types for timing
timetracks$years <- as.numeric(sapply(rownames(timetracks), substring, first = 4))
timetracks$res <- sapply(rownames(timetracks), substring, first = 1, last = 2)
# Regress over timing
lm_ShellChron_LR <- lm(total/60 ~ years, data = timetracks[timetracks$res == "LR", ])
lm_ShellChron_LR_pred <- as.data.frame(predict(lm_ShellChron_LR, newdata = data.frame(years = seq(3, 12 ,0.5)), interval = "confidence"))
lm_ShellChron_HR <- lm(total/60 ~ years, data = timetracks[timetracks$res == "HR", ])
lm_ShellChron_HR_pred <- as.data.frame(predict(lm_ShellChron_HR, newdata = data.frame(years = seq(3, 12 ,0.5)), interval = "confidence"))
# Import timing for Judd et al., model
Timing_Judd <- as.data.frame(read.csv("Timing_Judd.csv", header = TRUE))
Timeplot <- ggplot(timetracks, aes(years, total / 60)) +
geom_point(aes(col = res)) +
stat_smooth(data = timetracks[timetracks$res == "LR", ], method = lm, aes(col = res)) +
stat_smooth(data = timetracks[timetracks$res == "HR", ], method = lm, aes(col = res)) +
geom_point(data = Timing_Judd, aes(years, Judd / 60, col = res), shape = 1) +
stat_smooth(data = Timing_Judd[Timing_Judd$res == "LR", ], method = lm, aes(y = Judd / 60, col = res), linetype = "dashed") +
stat_smooth(data = Timing_Judd[Timing_Judd$res == "HR", ], method = lm, aes(y = Judd / 60, col = res), linetype = "dashed") +
scale_y_continuous("Total time (minutes)", breaks = seq(0, 225, 25)) +
scale_x_continuous("Length of record (yr)", breaks = seq(3, 12, 1))
require(tidyverse)
setwd("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time")
# Calculate accuracy of Judd et al. (2018) model
t_real <- as.data.frame(read.csv("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_Realtime.csv", header = TRUE)) # Import real timing data
JD_real <- ((t_real + 0.25) * 365) %% 365 # Correct for phase lag in data and convert to julian day
JD_real_cum <- (t_real + 0.25) * 365
# Create vector of datasets
recordnames <- c(paste("LR_", 3:12, sep = ""), paste("HR_", 3:12, sep = ""))
# Create dataframe to store timetrack results
timetracks <- data.frame(matrix(nrow = 20, ncol = 5))
rownames(timetracks) <- recordnames
colnames(timetracks) <- paste("STEP", 1:5)
# Create dataframes to store differences between data and model results
Dt_Judd <- data.frame(record = rep(NA, length(which(!is.na(JD_real))) * 10),
dt = rep(NA, length(which(!is.na(JD_real))) * 10)
)
Dt_Judd_cum <- data.frame(record = rep(NA, length(which(!is.na(JD_real))) * 10),
dt = rep(NA, length(which(!is.na(JD_real))) * 10)
)
D18O_Judd <- data.frame(record = rep(NA, length(which(!is.na(JD_real))) * 10),
dO = rep(NA, length(which(!is.na(JD_real))) * 10)
)
Dt_ShellChron <- data.frame(record = rep(NA, length(which(!is.na(JD_real))) * 10),
dt = rep(NA, length(which(!is.na(JD_real))) * 10)
)
Dt_ShellChron_cum <- data.frame(record = rep(NA, length(which(!is.na(JD_real))) * 10),
dt = rep(NA, length(which(!is.na(JD_real))) * 10)
)
D18O_ShellChron <- data.frame(record = rep(NA, length(which(!is.na(JD_real))) * 10),
dO = rep(NA, length(which(!is.na(JD_real))) * 10)
)
for(i in 1:length(recordnames)){
# Load timetrack data
timetrack <- read.csv(paste("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_", recordnames[i], "/timetrack", recordnames[i], ".csv", sep = ""))
timetracks[i, ] <- timetrack$x
# Load input data
dat <- as.data.frame(read.csv(paste("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_", recordnames[i], "/Case1_", recordnames[i], ".csv", sep = ""), header = TRUE))
# Load data Judd et al. model
Omod_Judd <- as.matrix(read.csv(paste("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_", recordnames[i], "/Judd_model/Omodsamp2.csv", sep = ""), header = FALSE)) # Load modelled d18O result
Omod_Judd <- as.vector(Omod_Judd[!is.na(Omod_Judd)])
JDmod_Judd <- as.matrix(read.csv(paste("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_", recordnames[i], "/Judd_model/JDmodsampshift2.csv", sep = ""), header = FALSE)) # Load modelled time result
JDmod_Judd <- as.vector(JDmod_Judd[!is.na(JDmod_Judd)])
# Create cumulative age from Judd et al. data
YM <- which(diff(JDmod_Judd) < -1) # Find year transitions, skip "years" in the model smaller than 1/2 year
x <- rep(0, length(JDmod_Judd))
for(y in YM){
x[(y + 1):length(x)] <- x[(y + 1):length(x)] + 1
}
JDmod_Judd_cum <- JDmod_Judd + x * 365
# Load ShellChron data
AMdat <- as.data.frame(read.csv(paste("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_", recordnames[i], "/Age_model_results.csv", sep = ""), header = TRUE)) # Load modelled time result
JDmod_ShellChron <- as.vector(AMdat$mean.day)
d18Odat <- as.data.frame(read.csv(paste("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_", recordnames[i], "/d18O_model_results.csv", sep = ""), header = TRUE)) # Load modelled d18O result
Omod_ShellChron <- as.vector(d18Odat$mean.d18O_mod)
# Calculate diffences between models and real data
if(grepl("LR", recordnames[i], fixed = TRUE)){ # Separate LR from HR datasets
# Judd et al., model
dt_Judd <- JDmod_Judd - JD_real$t_LR[min(which(dat$YEARMARKER == 1)):(max(which(dat$YEARMARKER == 1)) - 1)] # Calculate time difference between model and data
dt_Judd[which(abs(dt_Judd) > 182.5)] <- 182.5 - dt_Judd[which(abs(dt_Judd) > 182.5)] # If difference is more than 1/2 year, take the other half
dt_Judd_cum <- JDmod_Judd_cum - JD_real_cum$t_LR[min(which(dat$YEARMARKER == 1)):(max(which(dat$YEARMARKER == 1)) - 1)] # Calculate time difference between model and data
dO <- Omod_Judd - dat$d18Oc[min(which(dat$YEARMARKER == 1)):(max(which(dat$YEARMARKER == 1)) - 1)] # Calculate d18Oc difference between model and data
# ShellChron
dt_ShellChron <- (JDmod_ShellChron %% 365) - JD_real$t_LR[1:length(JDmod_ShellChron)] # Calculate time difference between model and data
dt_ShellChron[which(abs(dt_ShellChron) > 182.5)] <- 182.5 - dt_ShellChron[which(abs(dt_ShellChron) > 182.5)] # If difference is more than 1/2 year, take the other half
dt_ShellChron_cum <- JDmod_ShellChron - JD_real_cum$t_LR[1:length(JDmod_ShellChron)] # Calculate time difference between model and data
dO_ShellChron <- Omod_ShellChron - dat$d18Oc # Calculate d18Oc difference between model and data
}else{
dt_Judd <- JDmod_Judd - JD_real$t_HR[min(which(dat$YEARMARKER == 1)):(max(which(dat$YEARMARKER == 1)) - 1)] # Calculate time difference between model and data
dt_Judd[which(abs(dt_Judd) > 182.5)] <- 182.5 - dt_Judd[which(abs(dt_Judd) > 182.5)] # If difference is more than 1/2 year, take the other half
dt_Judd_cum <- JDmod_Judd_cum - JD_real_cum$t_HR[min(which(dat$YEARMARKER == 1)):(max(which(dat$YEARMARKER == 1)) - 1)] # Calculate time difference between model and data
dO <- Omod_Judd - dat$d18Oc[min(which(dat$YEARMARKER == 1)):(max(which(dat$YEARMARKER == 1)) - 1)] # Calculate d18Oc difference between model and data
# ShellChron
dt_ShellChron <- (JDmod_ShellChron %% 365) - JD_real$t_HR[1:length(JDmod_ShellChron)] # Calculate time difference between model and data
dt_ShellChron[which(abs(dt_ShellChron) > 182.5)] <- 182.5 - dt_ShellChron[which(abs(dt_ShellChron) > 182.5)] # If difference is more than 1/2 year, take the other half
dt_ShellChron_cum <- JDmod_ShellChron - JD_real_cum$t_HR[1:length(JDmod_ShellChron)] # Calculate time difference between model and data
dO_ShellChron <- Omod_ShellChron - dat$d18Oc # Calculate d18Oc difference between model and data
}
# Add results to dataframes
# Judd et al., model
Dt_Judd$dt[min(which(is.na(Dt_Judd$record))):(min(which(is.na(Dt_Judd$record))) + length(dt_Judd) - 1)] <- dt_Judd
Dt_Judd$record[min(which(is.na(Dt_Judd$record))):(min(which(is.na(Dt_Judd$record))) + length(dt_Judd) - 1)] <- rep(recordnames[i], length(dt_Judd))
Dt_Judd_cum$dt[min(which(is.na(Dt_Judd_cum$record))):(min(which(is.na(Dt_Judd_cum$record))) + length(dt_Judd_cum) - 1)] <- dt_Judd_cum
Dt_Judd_cum$record[min(which(is.na(Dt_Judd_cum$record))):(min(which(is.na(Dt_Judd_cum$record))) + length(dt_Judd_cum) - 1)] <- rep(recordnames[i], length(dt_Judd_cum))
D18O_Judd$dO[min(which(is.na(D18O_Judd$record))):(min(which(is.na(D18O_Judd$record))) + length(dO) - 1)] <- dO
D18O_Judd$record[min(which(is.na(D18O_Judd$record))):(min(which(is.na(D18O_Judd$record))) + length(dO) - 1)] <- rep(recordnames[i], length(dO))
# ShellChron
Dt_ShellChron$dt[min(which(is.na(Dt_ShellChron$record))):(min(which(is.na(Dt_ShellChron$record))) + length(dt_ShellChron) - 1)] <- dt_ShellChron
Dt_ShellChron$record[min(which(is.na(Dt_ShellChron$record))):(min(which(is.na(Dt_ShellChron$record))) + length(dt_ShellChron) - 1)] <- rep(recordnames[i], length(dt_ShellChron))
Dt_ShellChron_cum$dt[min(which(is.na(Dt_ShellChron_cum$record))):(min(which(is.na(Dt_ShellChron_cum$record))) + length(dt_ShellChron_cum) - 1)] <- dt_ShellChron_cum
Dt_ShellChron_cum$record[min(which(is.na(Dt_ShellChron_cum$record))):(min(which(is.na(Dt_ShellChron_cum$record))) + length(dt_ShellChron_cum) - 1)] <- rep(recordnames[i], length(dt_ShellChron_cum))
D18O_ShellChron$dO[min(which(is.na(D18O_ShellChron$record))):(min(which(is.na(D18O_ShellChron$record))) + length(dO) - 1)] <- dO
D18O_ShellChron$record[min(which(is.na(D18O_ShellChron$record))):(min(which(is.na(D18O_ShellChron$record))) + length(dO) - 1)] <- rep(recordnames[i], length(dO))
}
timetracks$total <- apply(timetracks, 1, sum) # Add column for total elapsed time
Dt_Judd <- Dt_Judd[complete.cases(Dt_Judd), ]
# Summarize statistics
Dtstats_Judd <- Dt_Judd[complete.cases(Dt_Judd), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dt), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dt), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dt), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
Dt_cumstats_Judd <- Dt_Judd_cum[complete.cases(Dt_Judd_cum), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dt), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dt), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dt), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
D18Ostats_Judd <- D18O_Judd[complete.cases(D18O_Judd), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dO), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dO), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dO), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
Dtstats_ShellChron <- Dt_ShellChron[complete.cases(Dt_ShellChron), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dt), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dt), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dt), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
Dt_cumstats_ShellChron <- Dt_ShellChron_cum[complete.cases(Dt_ShellChron_cum), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dt), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dt), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dt), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
D18Ostats_ShellChron <- D18O_ShellChron[complete.cases(D18O_ShellChron), ] %>% # Summarize modelled time offset statistics
ggpubr::group_by(record) %>%
dplyr::summarize(
mean = mean(abs(dO), na.rm = TRUE),  # Calculate means per sample
sd = sd(abs(dO), na.rm = TRUE),  # Calculate stdevs per sample
N = dplyr::n_distinct(abs(dO), na.rm = TRUE), # Calculate the number of modelled values, excluding NA's
se = sd / sqrt(N), # Calculate the standard error
CL95 = qt(0.95, N) * se # Calculate the 95% confidence level
)
# ------------------------------------------------------------------------------
# Plot results of performance time test
# Create plot of accuracy of cumulative model vs. number of modelled years
# Add numeric years and HR/LR record to Dt dataframes
Dt_cumstats_Judd$years <- as.numeric(sapply(Dt_cumstats_Judd$record, substring, first = 4))
Dt_cumstats_Judd$res <- sapply(Dt_cumstats_Judd$record, substring, first = 1, last = 2)
Dt_cumstats_ShellChron$years <- as.numeric(sapply(Dt_cumstats_ShellChron$record, substring, first = 4))
Dt_cumstats_ShellChron$res <- sapply(Dt_cumstats_ShellChron$record, substring, first = 1, last = 2)
accplot <- ggplot(data = Dt_cumstats_Judd, aes(years, mean)) +
geom_point(aes(col = res)) +
geom_line(aes(col = res), linetype = "dashed", size = 1) +
geom_errorbar(aes(x = years, ymin = mean - CL95, ymax = mean + CL95, col = res), width = 0.3) +
geom_point(data = Dt_cumstats_ShellChron, aes(col = res)) +
geom_line(data = Dt_cumstats_ShellChron, aes(col = res), size = 1) +
geom_errorbar(data = Dt_cumstats_ShellChron, aes(x = years, ymin = mean - CL95, ymax = mean + CL95, col = res), width = 0.3) +
scale_y_log10("offset from actual age (d)", breaks = c(seq(1, 10, 1), seq(20, 100, 10), seq(200, 1000, 100))) +
scale_x_continuous("Length of record (yr)", breaks = seq(3, 12, 1)) +
scale_colour_brewer(palette = "Paired")
# Plot duration of modelling against record
# Extract years and record types for timing
timetracks$years <- as.numeric(sapply(rownames(timetracks), substring, first = 4))
timetracks$res <- sapply(rownames(timetracks), substring, first = 1, last = 2)
# Regress over timing
lm_ShellChron_LR <- lm(total/60 ~ years, data = timetracks[timetracks$res == "LR", ])
lm_ShellChron_LR_pred <- as.data.frame(predict(lm_ShellChron_LR, newdata = data.frame(years = seq(3, 12 ,0.5)), interval = "confidence"))
lm_ShellChron_HR <- lm(total/60 ~ years, data = timetracks[timetracks$res == "HR", ])
lm_ShellChron_HR_pred <- as.data.frame(predict(lm_ShellChron_HR, newdata = data.frame(years = seq(3, 12 ,0.5)), interval = "confidence"))
# Import timing for Judd et al., model
Timing_Judd <- as.data.frame(read.csv("Timing_Judd.csv", header = TRUE))
Timeplot <- ggplot(timetracks, aes(years, total / 60)) +
geom_point(aes(col = res)) +
stat_smooth(data = timetracks[timetracks$res == "LR", ], method = lm, aes(col = res)) +
stat_smooth(data = timetracks[timetracks$res == "HR", ], method = lm, aes(col = res)) +
geom_point(data = Timing_Judd, aes(years, Judd / 60, col = res), shape = 1) +
stat_smooth(data = Timing_Judd[Timing_Judd$res == "LR", ], method = lm, aes(y = Judd / 60, col = res), linetype = "dashed") +
stat_smooth(data = Timing_Judd[Timing_Judd$res == "HR", ], method = lm, aes(y = Judd / 60, col = res), linetype = "dashed") +
scale_y_continuous("Total time (minutes)", breaks = seq(0, 225, 25)) +
scale_x_continuous("Length of record (yr)", breaks = seq(3, 12, 1))
x11(); plot(Timeplot)
Timeplot <- ggplot(timetracks, aes(years, total / 60)) +
stat_smooth(data = timetracks[timetracks$res == "LR", ], method = lm, aes(col = res)) +
stat_smooth(data = timetracks[timetracks$res == "HR", ], method = lm, aes(col = res)) +
geom_point(aes(col = res)) +
stat_smooth(data = Timing_Judd[Timing_Judd$res == "LR", ], method = lm, aes(y = Judd / 60, col = res), linetype = "dashed") +
stat_smooth(data = Timing_Judd[Timing_Judd$res == "HR", ], method = lm, aes(y = Judd / 60, col = res), linetype = "dashed") +
geom_point(data = Timing_Judd, aes(years, Judd / 60, col = res), shape = 1) +
scale_y_continuous("Total time (minutes)", breaks = seq(0, 225, 25)) +
scale_x_continuous("Length of record (yr)", breaks = seq(3, 12, 1))
x11(); plot(Timeplot)
pdf("Timing_comparison_plot.pdf", height = 5, width = 5)
plot(Timeplot)
dev.off()
lm_ShellChron_HR$coefficients
summary(lm_ShellChron_HR)
View(Timing_Judd)
lm_Judd_LR <- lm(Judd/60 ~ years, data = Timing_Judd[Timing_Judd$res == "LR", ])
lm_Judd_HR <- lm(Judd/60 ~ years, data = Timing_Judd[Timing_Judd$res == "HR", ])
summary(lm_ShellChron_HR)[1]
summary(lm_ShellChron_HR)[2]
summary(lm_ShellChron_HR)[3]
summary(lm_ShellChron_HR)[4]
summary(lm_ShellChron_HR)[5]
summary(lm_ShellChron_HR)[6]
summary(lm_ShellChron_HR)[7]
summary(lm_ShellChron_HR)[8]
lmtable <- data.frame(ShellChron_LR = c(lm_ShellChron_LR$coefficients, lm_ShellChron_LR$sigma, lm_ShellChron_LR$r.squared),
ShellChron_HR = c(lm_ShellChron_HR$coefficients, lm_ShellChron_HR$sigma, lm_ShellChron_HR$r.squared),
Judd_LR = c(lm_Judd_LR$coefficients, lm_Judd_LR$sigma, lm_Judd_LR$r.squared),
Judd_HR = c(lm_Judd_HR$coefficients, lm_Judd_HR$sigma, lm_Judd_HR$r.squared)
)
View(lmtable)
c(lm_Judd_HR$coefficients, lm_Judd_HR$sigma, lm_Judd_HR$r.squared)
lm_Judd_HR$sigma
lm_Judd_HR$summary
summary(lm_Judd_HR)$sigma
summary(lm_Judd_HR)$r.squared
lmtable <- data.frame(ShellChron_LR = c(lm_ShellChron_LR$coefficients, summary(lm_ShellChron_LR)$sigma, summary(lm_ShellChron_LR)$r.squared),
ShellChron_HR = c(lm_ShellChron_HR$coefficients, summary(lm_ShellChron_HR)$sigma, summary(lm_ShellChron_HR$)r.squared),
Judd_LR = c(lm_Judd_LR$coefficients, summary(lm_Judd_LR)$sigma, summary(lm_Judd_LR)$r.squared),
Judd_HR = c(lm_Judd_HR$coefficients, summary(lm_Judd_HR)$sigma, summary(lm_Judd_HR)$r.squared)
)
lmtable <- data.frame(ShellChron_LR = c(lm_ShellChron_LR$coefficients, summary(lm_ShellChron_LR)$sigma, summary(lm_ShellChron_LR)$r.squared),
ShellChron_HR = c(lm_ShellChron_HR$coefficients, summary(lm_ShellChron_HR)$sigma, summary(lm_ShellChron_HR)$r.squared),
Judd_LR = c(lm_Judd_LR$coefficients, summary(lm_Judd_LR)$sigma, summary(lm_Judd_LR)$r.squared),
Judd_HR = c(lm_Judd_HR$coefficients, summary(lm_Judd_HR)$sigma, summary(lm_Judd_HR)$r.squared)
)
View(lmtable)
lmtable <- data.frame(ShellChron_LR = c(lm_ShellChron_LR$coefficients, summary(lm_ShellChron_LR)$sigma, summary(lm_ShellChron_LR)$r.squared),
ShellChron_HR = c(lm_ShellChron_HR$coefficients, summary(lm_ShellChron_HR)$sigma, summary(lm_ShellChron_HR)$r.squared),
Judd_LR = c(lm_Judd_LR$coefficients, summary(lm_Judd_LR)$sigma, summary(lm_Judd_LR)$r.squared),
Judd_HR = c(lm_Judd_HR$coefficients, summary(lm_Judd_HR)$sigma, summary(lm_Judd_HR)$r.squared)
)
rownames(lmtable) <- c("intercept", "slope", "SD", "R2")
write.csv(lmtable, "Timing_regression_stats.csv")
View(AMdat)
AMdat <- as.data.frame(read.csv("E:/Dropbox/Research/Manuscripts/[Review] GMD - Bivalve age model/tests/revision/Performance time/Case1_HR_12/Age_model_results.csv", header = TRUE)) # Load modelled time result
View(AMdat)
View(Dt_ShellChron_cum)
Acccomp <- data.frame(D = AMdat$D, model = AMdat$CL95.day, real = abs(Dt_ShellChron_cum[Dt_ShellChron_cum$record == "HR_12", ]))
Acccomp <- data.frame(D = AMdat$D, model = AMdat$CL95.day, real = abs(Dt_ShellChron_cum[which(Dt_ShellChron_cum$record == "HR_12"), ]))
test <- Dt_ShellChron_cum[which(Dt_ShellChron_cum$record == "HR_12"), ]
View(test)
Acccomp <- data.frame(D = AMdat$D, model = AMdat$CL95.day, real = abs(Dt_ShellChron_cum$dt[which(Dt_ShellChron_cum$record == "HR_12")]))
View(Acccomp)
Acccomp <- Acccomp[complete.cases(Acccomp),]
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real), col = "light blue", size = 0.5) +
geom_line(col = "firebrick2", size = 0.5) +
scale_x_continuous("Depth along record", breaks = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL)", breaks = seq(0, 100, 10), limits = c(0, 100))
x11(); plot(acc_comp_plot)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real), col = "light blue", size = 0.5) +
geom_line(col = "firebrick2", size = 0.5) +
scale_x_continuous("Depth along record", breaks = seq(0, 120, 10) * 1000) +
scale_y_continuous("Uncertainty (95% CL)", breaks = seq(0, 100, 10), limits = c(0, 100))
x11(); plot(acc_comp_plot)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real), col = "light blue", size = 0.5) +
geom_line(col = "firebrick2", size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100))
x11(); plot(acc_comp_plot)
acc_box <- ggplot(data = stack(Acccomp[, -1])) +
stat_boxplot(aes(x = ind, y= values), geom = "errorbar", width = 0.5) +
geom_boxplot(aes(x = ind, y= values, fill = ind), size = 0.5, coef = 1.5, outlier.colour = "black", outlier.size = 1) +
scale_fill_manual("", values = c("firebrick2", "light blue")) +
scale_y_continuous("", breaks = seq(0, 100, 10), limits = c(0, 100)) +
xlab("") +
theme(legend.position = "none")
x11(); plot(acc_box)
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real), fill = "light blue", alpha = 0.5, bins = 40) +
geom_histogram(aes(model), fill = "firebrick2", alpha = 0.5, bins = 40) +
scale_x_continuous("Uncertainty (95% CL)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_y_continuous("Frequency", breaks = NULL)
x11(); plot(acc_hist)
x11(); plot(acc_hist)
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real), fill = "light blue", alpha = 0.5, bins = 100) +
geom_histogram(aes(model), fill = "firebrick2", alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_y_continuous("Frequency", breaks = NULL)
x11(); plot(acc_hist)
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real), fill = "light blue", alpha = 0.5, bins = 100) +
geom_histogram(aes(model), fill = "firebrick2", alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL)
x11(); plot(acc_hist)
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = real), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = model), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL)
plot(acc_hist)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real, col = real), size = 0.5) +
geom_line(aes(col = model), size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_colour_brewer(palette = "Paired")
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = real), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = model), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL) +
scale_colour_brewer(palette = "Paired")
x11(); plot(acc_hist)
x11(); plot(acc_comp_plot)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real, col = "real offset"), size = 0.5) +
geom_line(aes(col = "model uncertainty"), size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_colour_brewer(palette = "Paired")
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = "real offset"), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = "model uncertainty"), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL) +
scale_colour_brewer(palette = "Paired")
x11(); plot(acc_comp_plot)
x11(); plot(acc_hist)
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = "real offset"), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = "model uncertainty"), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL) +
scale_fill_brewer(palette = "Paired")
x11(); plot(acc_hist)
View(Acccomp)
acc_box <- ggplot(data = stack(Acccomp[, -1])) +
stat_boxplot(aes(x = ind, y= values), geom = "errorbar", width = 0.5) +
geom_boxplot(aes(x = ind, y= values, fill = ind), size = 0.5, coef = 1.5, outlier.colour = "black", outlier.size = 1) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous("", breaks = seq(0, 100, 10), limits = c(0, 100)) +
xlab("") +
theme(legend.position = "none")
x11(); plot(acc_box)
acc_box <- ggplot(data = stack(Acccomp[, -1])) +
stat_boxplot(aes(x = ind, y= values), geom = "errorbar", width = 0.5) +
geom_boxplot(aes(x = ind, y= values, fill = ind), size = 0.5, coef = 1.5, outlier.colour = "black", outlier.size = 1) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous("", breaks = seq(0, 50, 10), limits = c(0, 50)) +
xlab("") +
theme(legend.position = "none")
x11(); plot(acc_box)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real, col = "real offset"), size = 0.5) +
geom_line(aes(col = "model uncertainty"), size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_colour_brewer(palette = "Paired")
acc_box <- ggplot(data = stack(Acccomp[, -1])) +
stat_boxplot(aes(x = ind, y= values), geom = "errorbar", width = 0.5) +
geom_boxplot(aes(x = ind, y= values, fill = ind), size = 0.5, coef = 1.5, outlier.colour = "black", outlier.size = 1) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous("", breaks = seq(0, 50, 10), limits = c(0, 50)) +
xlab("") +
theme(legend.position = "none")
combined_acc_comp_plots <- grid.arrange(acc_comp_plot, acc_box, ncol = 2, nrow = 1, widths = c(8, 1))
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = "real offset"), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = "model uncertainty"), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL) +
scale_fill_brewer(palette = "Paired")
pdf("Accuracy_comparison.pdf", width = 10, height = 5)
plot(combined_acc_comp_plots)
dev.off()
pdf("Accuracy_histograms.pdf", width = 3, height = 3)
plot(acc_hist)
dev.off()
require(gridExtra)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real, col = "real offset"), size = 0.5) +
geom_line(aes(col = "model uncertainty"), size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_colour_brewer(palette = "Paired")
acc_box <- ggplot(data = stack(Acccomp[, -1])) +
stat_boxplot(aes(x = ind, y= values), geom = "errorbar", width = 0.5) +
geom_boxplot(aes(x = ind, y= values, fill = ind), size = 0.5, coef = 1.5, outlier.colour = "black", outlier.size = 1) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous("", breaks = seq(0, 50, 10), limits = c(0, 50)) +
xlab("") +
theme(legend.position = "none")
combined_acc_comp_plots <- grid.arrange(acc_comp_plot, acc_box, ncol = 2, nrow = 1, widths = c(8, 1))
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = "real offset"), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = "model uncertainty"), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL) +
scale_fill_brewer(palette = "Paired")
pdf("Accuracy_comparison.pdf", width = 10, height = 5)
plot(combined_acc_comp_plots)
dev.off()
pdf("Accuracy_histograms.pdf", width = 3, height = 3)
plot(acc_hist)
dev.off()
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real, col = "real offset"), size = 0.5) +
geom_line(aes(col = "model uncertainty"), size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_colour_brewer(palette = "Paired") +
theme(legend.position = "NONE")
x11(); plot(acc_comp_plot)
acc_comp_plot <- ggplot(data = Acccomp, aes(D, model)) +
geom_ribbon(aes(x = D, ymin = model, ymax = real), fill = "grey", alpha = 0.3) +
geom_line(aes(D, real, col = "real offset"), size = 0.5) +
geom_line(aes(col = "model uncertainty"), size = 0.5) +
scale_x_continuous("Depth along record (mm)", breaks = seq(0, 120, 10) * 1000, labels = seq(0, 120, 10)) +
scale_y_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 100, 10), limits = c(0, 100)) +
scale_colour_brewer(palette = "Paired") +
theme(legend.position = "NONE")
acc_box <- ggplot(data = stack(Acccomp[, -1])) +
stat_boxplot(aes(x = ind, y= values), geom = "errorbar", width = 0.5) +
geom_boxplot(aes(x = ind, y= values, fill = ind), size = 0.5, coef = 1.5, outlier.colour = "black", outlier.size = 1) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous("", breaks = seq(0, 50, 10), limits = c(0, 50)) +
xlab("") +
theme(legend.position = "none")
combined_acc_comp_plots <- grid.arrange(acc_comp_plot, acc_box, ncol = 2, nrow = 1, widths = c(8, 1))
acc_hist <- ggplot(data = Acccomp) +
geom_histogram(aes(real, fill = "real offset"), alpha = 0.5, bins = 100) +
geom_histogram(aes(model, fill = "model uncertainty"), alpha = 0.5, bins = 100) +
scale_x_continuous("Uncertainty (95% CL; days)", breaks = seq(0, 50, 5), limits = c(0, 50)) +
scale_y_continuous("Frequency", breaks = NULL) +
scale_fill_brewer(palette = "Paired")
pdf("Accuracy_comparison.pdf", width = 10, height = 5)
plot(combined_acc_comp_plots)
dev.off()
pdf("Accuracy_histograms.pdf", width = 3, height = 3)
plot(acc_hist)
dev.off()
