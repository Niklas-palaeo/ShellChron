model$Y,
ymin = model$Y - 1.96 * Y_err,
ymax = model$Y + 1.96 * Y_err),
width = 0.5,
col = "red") +
ggplot2::geom_errorbarh(data = result, ggplot2::aes(model$X,
model$Y,
xmin = model$X - 1.96 * X_err,
xmax = model$X + 1.96 * X_err),
height = 0.1,
col = "red") +
ggplot2::ggtitle("Step 3: Plot showing projected error on model result (red)
(x-data in grey shade)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
Combined_plots <- ggpubr::ggarrange(datplot, arrowplot, resultplot, labels = c("A", "B", "C"), ncol = 3, nrow = 1) # Combine plots
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Orthogonal error projection plot.pdf", width = 15, height = 5)
print(Combined_plots)
dev.off()
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Orthogonal error projection plot.pdf", width = 30, height = 10)
print(Combined_plots)
dev.off()
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Orthogonal error projection plot.pdf", width = 20, height = 7)
print(Combined_plots)
dev.off()
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (95% CL)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Step 1: Plot showing input data (black) and model result (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
# Plot data + arrows indicating the projection of input on model results
arrowplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point() +
ggplot2::geom_segment(aes(x = x,
y = y,
xend = result$X,
yend = result$Y),
arrow = arrow(length = unit(0.3, "cm"))) +
ggplot2::ggtitle("Step 2: Plot showing how input data (black) is projected on
model result (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
# Plot the resulting errors on the modelled data
resultplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point(alpha = 0.2) +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (95% CL)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black",
alpha = 0.1) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black",
alpha = 0.1) +
ggplot2::geom_errorbar(data = result, ggplot2::aes(model$X, # Add error bars on measurement (95% CL)
model$Y,
ymin = model$Y - 1.96 * Y_err,
ymax = model$Y + 1.96 * Y_err),
width = 0.5,
col = "red") +
ggplot2::geom_errorbarh(data = result, ggplot2::aes(model$X,
model$Y,
xmin = model$X - 1.96 * X_err,
xmax = model$X + 1.96 * X_err),
height = 0.1,
col = "red") +
ggplot2::ggtitle("Step 3: Plot showing projected error on model result (red)
(x-data in grey shade)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
Combined_plots <- ggpubr::ggarrange(datplot, arrowplot, resultplot, labels = c("A", "B", "C"), ncol = 3, nrow = 1) # Combine plots
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Orthogonal error projection plot.pdf", width = 20, height = 7)
print(Combined_plots)
dev.off()
# Plot input data
datplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (95% CL)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black") +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black") +
ggplot2::ggtitle("Step 1: Plot showing input data (black) and model result (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
# Plot data + arrows indicating the projection of input on model results
arrowplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_line(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point() +
ggplot2::geom_segment(aes(x = x,
y = y,
xend = result$X,
yend = result$Y),
arrow = arrow(length = unit(0.3, "cm"))) +
ggplot2::ggtitle("Step 2: Plot showing how input data (black) is projected on
model result (red)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
# Plot the resulting errors on the modelled data
resultplot <- ggplot2::ggplot(data = input, ggplot2::aes(x, y)) +
ggplot2::geom_point(data = model, ggplot2::aes(X, Y), col = "red", size = 2) +
ggplot2::geom_point(alpha = 0.2) +
ggplot2::geom_errorbar(ggplot2::aes(ymin = y - 1.96 * y_err, # Add error bars on measurement (95% CL)
ymax = y + 1.96 * y_err),
width = 0.5,
col = "black",
alpha = 0.1) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = x - 1.96 * x_err,
xmax = x + 1.96 * x_err),
height = 0.1,
col = "black",
alpha = 0.1) +
ggplot2::geom_errorbar(data = result, ggplot2::aes(model$X, # Add error bars on measurement (95% CL)
model$Y,
ymin = model$Y - 1.96 * Y_err,
ymax = model$Y + 1.96 * Y_err),
width = 0.5,
col = "red") +
ggplot2::geom_errorbarh(data = result, ggplot2::aes(model$X,
model$Y,
xmin = model$X - 1.96 * X_err,
xmax = model$X + 1.96 * X_err),
height = 0.1,
col = "red") +
ggplot2::ggtitle("Step 3: Plot showing projected error on model result (red)
(input-data in grey shade)") +
ggplot2::xlab("X-value") +
ggplot2::ylab("Y-value")
Combined_plots <- ggpubr::ggarrange(datplot, arrowplot, resultplot, labels = c("A", "B", "C"), ncol = 3, nrow = 1) # Combine plots
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Orthogonal error projection plot.pdf", width = 20, height = 7)
print(Combined_plots)
dev.off()
testarray <- array(NA, dim = c(40, 36, 9)) # Create empty array
# with correct third dimension
windowfill <- seq(50, 500, 50) %% 365 # Create dummy simulation data
# (ages) to copy through the array
for(i in 6:length(testarray[1, , 1])){
testarray[, i, 3] <- c(windowfill, rep(NA, length(testarray[, 1, 3]) - length(windowfill)))
windowfill <- c(NA, (windowfill + 51) %% 365)
}
# Add dummy /code{D} column.
testarray[, 1, 3] <- seq(1, length(testarray[, 1, 3]), 1)
rm(list=ls())
testarray <- array(NA, dim = c(40, 36, 9)) # Create empty array
# with correct third dimension
windowfill <- seq(50, 500, 50) %% 365 # Create dummy simulation data
# (ages) to copy through the array
for(i in 6:length(testarray[1, , 1])){
testarray[, i, 3] <- c(windowfill, rep(NA, length(testarray[, 1, 3]) - length(windowfill)))
windowfill <- c(NA, (windowfill + 51) %% 365)
}
# Add dummy /code{D} column.
testarray[, 1, 3] <- seq(1, length(testarray[, 1, 3]), 1)
JDdata <- testarray[, , 3]
View(JDdata)
# Create dummy dynwindow data
dynwindow <- as.data.frame(seq(1, 31, 1))
colnames(dynwindow) <- "x"
dynwindow$y <- rep(10, 31)
dimnames(testarray) <- list(
paste("sample", 1:length(testarray[, 1, 3])),
c(colnames(dat), paste("window", 1:length(dynwindow$x))),
c("Modelled_d18O", "d18O_residuals", "Time_of_year", "Instantaneous_growth_rate", "Modelled temperature", "Modelled_d18O_SD", "Time_of_Year_SD", "Instantaneous_growth_rate_SD", "Modelled_temperature_SD")
)
JDdata <- testarray[, , 3]
# Create dummy input data column by column
dat <- as.data.frame(seq(1000, 40000, 1000))
colnames(dat) <- "D"
dat$d18Oc <- sin((2 * pi * (seq(1, 40, 1) - 8 + 7 / 4)) / 7)
dat$YEARMARKER <- c(0, rep(c(0, 0, 0, 0, 0, 0, 1), 5), 0, 0, 0, 0)
dat$D_err <- rep(100, 40)
dat$d18Oc_err <- rep(0.1, 40)
testarray <- array(NA, dim = c(40, 36, 9)) # Create empty array
# with correct third dimension
windowfill <- seq(50, 500, 50) %% 365 # Create dummy simulation data
# (ages) to copy through the array
for(i in 6:length(testarray[1, , 1])){
testarray[, i, 3] <- c(windowfill, rep(NA, length(testarray[, 1, 3]) - length(windowfill)))
windowfill <- c(NA, (windowfill + 51) %% 365)
}
# Add dummy /code{D} column.
testarray[, 1, 3] <- seq(1, length(testarray[, 1, 3]), 1)
# Create dummy dynwindow data
dynwindow <- as.data.frame(seq(1, 31, 1))
colnames(dynwindow) <- "x"
dynwindow$y <- rep(10, 31)
dimnames(testarray) <- list(
paste("sample", 1:length(testarray[, 1, 3])),
c(colnames(dat), paste("window", 1:length(dynwindow$x))),
c("Modelled_d18O", "d18O_residuals", "Time_of_year", "Instantaneous_growth_rate", "Modelled temperature", "Modelled_d18O_SD", "Time_of_Year_SD", "Instantaneous_growth_rate_SD", "Modelled_temperature_SD")
)
JDdata <- testarray[, , 3]
View(JDdata)
JDdata <- as.data.frame(testarray[, , 3])
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_line(aes(D, window1))
x11(); plot(resultplot)
dimnames(testarray) <- list(
paste("sample", 1:length(testarray[, 1, 3])),
c(colnames(dat), paste("window", 1:length(dynwindow$x), sep = "")),
c("Modelled_d18O", "d18O_residuals", "Time_of_year", "Instantaneous_growth_rate", "Modelled temperature", "Modelled_d18O_SD", "Time_of_Year_SD", "Instantaneous_growth_rate_SD", "Modelled_temperature_SD")
)
JDdata <- as.data.frame(testarray[, , 3]) # Isolate the julian day results of the model
# Plot selection of model results
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_line(aes(D, window1))
x11(); plot(resultplot)
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D, window1)) +
ggplot2::geom_point(ggplot2::aes(D, window2)) +
ggplot2::geom_point(ggplot2::aes(D, window3)) +
ggplot2::geom_point(ggplot2::aes(D, window4)) +
ggplot2::geom_point(ggplot2::aes(D, window5)) +
ggplot2::geom_point(ggplot2::aes(D, window6))
x11(); plot(resultplot)
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D, window1)) +
ggplot2::geom_point(ggplot2::aes(D, window2)) +
ggplot2::geom_point(ggplot2::aes(D, window3)) +
ggplot2::geom_point(ggplot2::aes(D, window4)) +
ggplot2::geom_point(ggplot2::aes(D, window5)) +
ggplot2::geom_point(ggplot2::aes(D, window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(D), max(D[which(!is.na(window6))]), by = 1), 1))
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D, window1)) +
ggplot2::geom_point(ggplot2::aes(D, window2)) +
ggplot2::geom_point(ggplot2::aes(D, window3)) +
ggplot2::geom_point(ggplot2::aes(D, window4)) +
ggplot2::geom_point(ggplot2::aes(D, window5)) +
ggplot2::geom_point(ggplot2::aes(D, window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]), by = 1), 1))
x11(); plot(resultplot)
max(JDdata$D[which(!is.na(JDdata$window6))])
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D, window1)) +
ggplot2::geom_point(ggplot2::aes(D, window2)) +
ggplot2::geom_point(ggplot2::aes(D, window3)) +
ggplot2::geom_point(ggplot2::aes(D, window4)) +
ggplot2::geom_point(ggplot2::aes(D, window5)) +
ggplot2::geom_point(ggplot2::aes(D, window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
max(JDdata$D[which(!is.na(JDdata$window6))])
plot(resultplot)
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(data = JDdata, ggplot2::aes(D, window1)) +
ggplot2::geom_point(data = JDdata, ggplot2::aes(D, window2)) +
ggplot2::geom_point(data = JDdata, ggplot2::aes(D, window3)) +
ggplot2::geom_point(data = JDdata, ggplot2::aes(D, window4)) +
ggplot2::geom_point(data = JDdata, ggplot2::aes(D, window5)) +
ggplot2::geom_point(data = JDdata, ggplot2::aes(D, window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
plot(resultplot)
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D, window1)) +
ggplot2::geom_point(ggplot2::aes(D, window2)) +
ggplot2::geom_point(ggplot2::aes(D, window3)) +
ggplot2::geom_point(ggplot2::aes(D, window4)) +
ggplot2::geom_point(ggplot2::aes(D, window5)) +
ggplot2::geom_point(ggplot2::aes(D, window6)) +
ggplot2::scale_x_continuous(breaks = seq(1, 15, 1))
plot(resultplot)
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window1))], window1)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window2))], window2)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window3))], window3)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window4))], window4)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window5))], window5)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window6))], window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
plot(resultplot)
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window1))], window1)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window2))], window2)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window3))], window3)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window4))], window4)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window5))], window5)) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window6))], window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
plot(resultplot)
resultplot <- ggplot2::ggplot(JDdata) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window1))], window1[which(!is.na(window1))])) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window2))], window2[which(!is.na(window2))])) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window3))], window3[which(!is.na(window3))])) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window4))], window4[which(!is.na(window4))])) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window5))], window5[which(!is.na(window5))])) +
ggplot2::geom_point(ggplot2::aes(D[which(!is.na(window6))], window6[which(!is.na(window6))])) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
plot(resultplot)
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(JDdata, ggplot2::aes(D[which(!is.na(window1))], window1[which(!is.na(window1))])) +
ggplot2::geom_point(JDdata, ggplot2::aes(D[which(!is.na(window2))], window2[which(!is.na(window2))])) +
ggplot2::geom_point(JDdata, ggplot2::aes(D[which(!is.na(window3))], window3[which(!is.na(window3))])) +
ggplot2::geom_point(JDdata, ggplot2::aes(D[which(!is.na(window4))], window4[which(!is.na(window4))])) +
ggplot2::geom_point(JDdata, ggplot2::aes(D[which(!is.na(window5))], window5[which(!is.na(window5))])) +
ggplot2::geom_point(JDdata, ggplot2::aes(D[which(!is.na(window6))], window6[which(!is.na(window6))])) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(JDdata[which(!is.na(window1))], ggplot2::aes(D, window1))
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(JDdata[which(!is.na(JDdata$window1))], ggplot2::aes(D, window1))
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window1))], ggplot2::aes(D, window1))
plot(resultplot)
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window1))], ggplot2::aes(D, window1)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window2))], ggplot2::aes(D, window2)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window3))], ggplot2::aes(D, window3)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window4))], ggplot2::aes(D, window4)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window5))], ggplot2::aes(D, window5)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window6))], ggplot2::aes(D, window6))
plot(resultplot)
resultplot <- ggplot2::ggplot() +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window1)),], ggplot2::aes(D, window1)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window2)),], ggplot2::aes(D, window2)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window3)),], ggplot2::aes(D, window3)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window4)),], ggplot2::aes(D, window4)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window5)),], ggplot2::aes(D, window5)) +
ggplot2::geom_point(data = JDdata[which(!is.na(JDdata$window6)),], ggplot2::aes(D, window6))
plot(resultplot)
resultplot <- ggplot2::ggplot() +
ggplot2::geom_line(data = JDdata[which(!is.na(JDdata$window1)),], ggplot2::aes(D, window1)) +
ggplot2::geom_line(data = JDdata[which(!is.na(JDdata$window2)),], ggplot2::aes(D, window2)) +
ggplot2::geom_line(data = JDdata[which(!is.na(JDdata$window3)),], ggplot2::aes(D, window3)) +
ggplot2::geom_line(data = JDdata[which(!is.na(JDdata$window4)),], ggplot2::aes(D, window4)) +
ggplot2::geom_line(data = JDdata[which(!is.na(JDdata$window5)),], ggplot2::aes(D, window5)) +
ggplot2::geom_line(data = JDdata[which(!is.na(JDdata$window6)),], ggplot2::aes(D, window6)) +
ggplot2::scale_x_continuous(breaks = round(seq(min(JDdata$D), max(JDdata$D[which(!is.na(JDdata$window6))]) + 1, by = 1), 1))
plot(resultplot)
dynwindow <- as.data.frame(seq(1, 31, 1))
colnames(dynwindow) <- "x"
dynwindow$y <- rep(10, 31)
i = 1
weights <- dynwindow$y[[i]] / 2 - abs(dynwindow$x[[i]]:(dynwindow$x[[i]] + dynwindow$y[[i]] - 1) - (dynwindow$x[[i]] + (dynwindow$y[[i]] - 1) / 2))
plot(weights)
i = 1
weights <- data.frame(seq(1, dynwindow$y[i])
dynwindow$y[[i]] / 2 - abs(dynwindow$x[[i]]:(dynwindow$x[[i]] + dynwindow$y[[i]] - 1) - (dynwindow$x[[i]] + (dynwindow$y[[i]] - 1) / 2))
)
i = 1
weights <- data.frame(seq(1, dynwindow$y[i], 1),
dynwindow$y[[i]] / 2 - abs(dynwindow$x[[i]]:(dynwindow$x[[i]] + dynwindow$y[[i]] - 1) - (dynwindow$x[[i]] + (dynwindow$y[[i]] - 1) / 2))
)
View(weights)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point()
ggplot2::geom_line(col = "black")
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line(col = "black")
plot(weightsplot)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line()
plot(weightsplot)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point(ggplot2::aes(x, weight)) +
ggplot2::geom_line(ggplot2::aes(x, weight))
plot(weightsplot)
View(weights)
i = 1
weights <- data.frame(x = seq(1, dynwindow$y[i], 1),
weight = dynwindow$y[[i]] / 2 - abs(dynwindow$x[[i]]:(dynwindow$x[[i]] + dynwindow$y[[i]] - 1) - (dynwindow$x[[i]] + (dynwindow$y[[i]] - 1) / 2))
)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line()
View(weights)
plot(weightsplot)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(D), max(D) + 1, by = 1))
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(D), max(D) + 1, 1))
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(x), max(x) + 1, 1))
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1))
plot(weightsplot)
weights$weight <- weights$weight / max(weights$weight)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Relative weight")
plot(weightsplot)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::scale_y_continuous(breaks = seq(0, max(weights$weight), 0.1)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Relative weight")
plot(weightsplot)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(Weights_plot)
dev.off()
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(Weightsplot)
dev.off()
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(weightsplot)
dev.off()
# Calculate weights for one window as example
i = 1
weights <- data.frame(x = seq(1, dynwindow$y[i], 1),
weight = dynwindow$y[[i]] / 2 - abs(dynwindow$x[[i]]:(dynwindow$x[[i]] + dynwindow$y[[i]] - 1) - (dynwindow$x[[i]] + (dynwindow$y[[i]] - 1) / 2))
)
weights$weight <- weights$weight / sum(weights$weight)
# Plot distribution of weights within a window
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::scale_y_continuous(breaks = seq(0, max(weights$weight), 0.1)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Weight as fraction of total contribution")
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(weightsplot)
dev.off()
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::scale_y_continuous(breaks = seq(0, max(weights$weight), 0.01)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Weight as fraction of total contribution")
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(weightsplot)
dev.off()
# Plot distribution of weights within a window
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::scale_y_continuous(breaks = seq(0, max(weights$weight), 0.02)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Weight as fraction of total contribution")
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(weightsplot)
dev.off()
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::scale_y_continuous(breaks = seq(-0.2, max(weights$weight), 0.02)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Weight as fraction of total contribution")
plot(weightsplot)
weightsplot <- ggplot2::ggplot(weights, ggplot2::aes(x, weight)) +
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = seq(min(weights$x), max(weights$x) + 1, 1)) +
ggplot2::scale_y_continuous(breaks = seq(0, max(weights$weight), 0.02)) +
ggplot2::xlab("Position in window") +
ggplot2::ylab("Weight as fraction of total contribution")
# Export plot results (optional)
setwd("E:/Dropbox/Research/Manuscripts/Bivalve age model/Figures")
pdf("Weights_plot.pdf")
print(weightsplot)
dev.off()
devtools::check()
system.file("extdata", "Virtual_shell.csv", package = "ShellChron")
path <- system.file("extdata", "Virtual_shell.csv", package = "ShellChron")
setwd(path)
file <- system.file("extdata", "Virtual_shell.csv", package = "ShellChron")
#' data_import(file) # Run function
file <- system.file("extdata", "Virtual_shell.csv", package = "ShellChron")
data_import(file) # Run function
