T_av = round(T_max + 0.5, 0), # Maximum average T in degrees C
G_amp = 2 * GRavmax, # Maximum seasonal GR range in um/d
G_pha = 365, # Maximum GR phase in days
G_av = GRavmax, # Maximum average GR in um/d (based on conservative boundaries of YEARMARKER indicators)
G_skw = 100 # Maximum skew factor
)
# Set parameters for SCEUA optimization
iniflg = 1 # Flag for initial parameter array (1 = included)
ngs = 25 # Number of complexes (sub-populations)
maxn = 10000 # Maximum number of function evaluations allowed during optimization
kstop = 5 # Maximum number of evolution loops before convergency
pcento = 0.01 # Percentage change allowed in function value criterion before stop
peps = 0.01 # Convergence level for parameter set (difference between parameters required for stop)
# Run the model on all windows
for(i in 1:length(dynwindow$x)){ # Loop over shell record
print(paste("Processing Datawindow:", i, "of", length(dynwindow$x))) # Keep track of progress
# Isolate year of d18O data based on window data
Dsam <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 1]
Osam <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 2]
if(MC > 0){
D_err <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 4] # Optional: include error on D
O_err <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 5] # Optional: include error on d18Oc
}else{
D_err <- rep(0, dynwindow$y)
O_err <- rep(0, dynwindow$y)
MC <- 0
}
sinlist <- sinreg(Dsam, Osam) # Run sinusoidal regression to find initial parameter values
# Estimate starting parameters from regression results
O_av_start <- sinlist[[1]][1] # Export starting value for annual d18O average
O_amp_start <- sinlist[[1]][2] # Export starting value for d18O amplitude
if(transfer_function == "KimONeil97"){
T_av_start <- 18.03 * 1000 / (1000 * log((O_av_start - (0.97002 * mean(d18Ow) - 29.98)) / 1000 + 1) + 32.42) - 273.15  # Estimate mean temperature. Use Kim and O'Neil (1997) with conversion between VSMOW and VPDB by Brand et al. (2014)
T_amp_start <- 18.03 * 1000 / (1000 * log((O_av_start - O_amp_start - (0.97002 * mean(d18Ow) - 29.98)) / 1000 + 1) + 32.42) - 273.15 - T_av_start # Estimate temperature amplitude. Use Kim and O'Neil (1997) with conversion between VSMOW and VPDB by Brand et al. (2014)
}else if(transfer_function == "GrossmanKu86"){
T_av_start <- 20.6 - 4.34 * (O_av_start - mean(d18Ow) - 0.2) # Estimate mean temperature. Use Grossmann and Ku (1986) modified by Dettmann et al. (1999)
T_amp_start <- 20.6 - 4.34 * (O_av_start - O_amp_start - mean(d18Ow) - 0.2) - T_av_start # Estimate mean temperature. Use Grossmann and Ku (1986) modified by Dettmann et al. (1999)
}else{
print("ERROR: Supplied transfer function is not recognized")
}
O_pha_start <- sinlist[[1]][4] %% sinlist[[1]][3] # Estimate position (in depth of the first peak in d18O)
O_peak <- O_pha_start + Dsam[1] # Find position of d18O peak in distance domain
O_per_start <- sinlist[[1]][3] # Export starting value for period in distance domain
T_pha_start <- ((O_pha_start - 0.5 * O_per_start) %% O_per_start) / O_per_start * T_per # Estimate position of first peak in temperature (low in d18O) relative to annual cycle (days)
G_av_start <- O_per_start / G_per # Estimate average growth rate in distance/day
years <- ceiling((diff(range(Dsam)) / O_per_start - 1) / 2) * 2 + 1 # Find next odd number to expand the number of simulated years to cover full window
# Collate starting parameters
par0 <- c(
T_amp = T_amp_start,
T_pha = T_pha_start,
T_av = T_av_start,
G_amp = G_av_start / 2, # Start by estimating growth rate changes by half the average
G_pha = T_pha_start, # Start by estimating that the peak in growth rate coincides with the peak in temperature
G_av = G_av_start,
G_skw = 50 # Start with a no skew
)
invisible(capture.output( # Suppress the details on converging SCEUA
sceua_list <- rtop::sceua(growth_model,
par0,
T_per = T_per,
G_per = G_per,
years = years,
t_int = t_int,
transfer_function = transfer_function,
d18Ow = d18Ow,
Dsam = Dsam,
Osam = Osam,
t_maxtemp = t_maxtemp,
parl,
paru,
maxn,
kstop,
pcento,
ngs,
iniflg = iniflg,
peps = peps,
implicit = function(pars){sum(pars[4]/2, pars[6]) < 1} # Make sure that the cumulative GR curve is not located below 0 (if G_av < - G_amp / 2)
)
))
par1 <- sceua_list[[1]] # Eport parameters of final model
names(par1) <- names(par0)
result <- growth_model(par1, T_per, G_per, years, t_int, transfer_function, d18Ow, Dsam, Osam, t_maxtemp, plot = FALSE, MC, D_err, O_err, return = "result") # Calculate the end result of the best fit
if(plot == TRUE){
fitplot <- fitplot + # Add the new model fit to the plot to track progress of the model
ggplot2::geom_point(data = as.data.frame(result), ggplot2::aes(Dsam, Omod), colour = "red") +
ggplot2::geom_line(data = as.data.frame(result), ggplot2::aes(Dsam, Omod), colour = "red")
print(fitplot)
}
resultarray[, i + length(dat[1, ]), ] <- rbind(matrix(NA, nrow = i - 1, ncol = 9), result[, 3:11], matrix(NA, nrow = length(dat$D) - i - length(result[,1]) + 1, ncol = 9)) # Add results to result array
parmat[, i] <- par1 # Add parameters to parameter array
}
# Provide names for all dimensions in the result array
dimnames(resultarray) <- list(
paste("sample", 1:length(resultarray[, 1, 3])),
c(colnames(dat), paste("window", 1:length(dynwindow$x))),
c("Modelled_d18O", "d18O_residuals", "Time_of_year", "Instantaneous_growth_rate", "Modelled temperature", "Modelled_d18O_SD", "Time_of_Year_SD", "Instantaneous_growth_rate_SD", "Modelled_temperature_SD")
)
colnames(parmat) <- paste("window", 1:length(parmat[1,]))
return(list(resultarray, parmat))
}
"resultlist <- run_model(dat, dynwindow, "KimONeil97", d18Ow, T_per, G_per, t_int, t_maxtemp, MC, plot = TRUE)"
run_model <- function(dat, # Core function to run the entire model on the data (dat)
dynwindow, # The window vetor resulting from reading in the data
transfer_function = "KimONeil97",
d18Ow = 0,
T_per = 365, # Temperature sinusoid parameters
G_per = 365, # Growth sinusoid parameters
t_int = 1, # Default time interval = 1 day
t_maxtemp = 182.5, # Default time (day) at which maximum temperature is reached is 182.5 (exactly halfway through the year, or 1st of June)
MC = 1000, # If errors = TRUE, give the number of iterations for Monte Carlo simulation used in error propagation (default = 1000, if MC = 0 no eror propagation is done)
plot = FALSE # Should the progress of model fitting be plotted?
){
d18Oc <- d18Oc_err <- Omod <- NULL # Predefine variables to circumvent global variable binding error
# Prepare data arrays for storage of modelling results
resultarray <- array( # Create array to contain all modelling results of overlapping windows
rep(as.matrix(cbind(dat, matrix(NA, ncol = length(dynwindow$x), nrow = length(dat$D)))), 9), # Replicate matrix of dat + extra columns to contain all variables
dim = c(length(dat$D), length(dynwindow$x) + length(dat[1,]), 9) # Six variables, being: Modelled d18O, residuals, Day of the Year, Growth between datapoints, Instantaneous growth rate at datapoint and Modelled temperature
)
parmat <- matrix(NA, nrow = 7, ncol = length(dynwindow$x)) # Matrix in which to store the modelling parameters
colnames(parmat) <- dynwindow$x
rownames(parmat) <- c("T_amp", "T_pha", "T_av", "G_amp", "G_pha", "G_av", "G_skw")
# Prepare plot to show model progress
if(plot == TRUE){
dev.new()
fitplot <- ggplot2::ggplot(dat, ggplot2::aes(D, d18Oc)) + # Create a plot showing the fit of each window on the original data, start with a plot of the original data
ggplot2::geom_point() +
ggplot2::geom_line() +
ggplot2::geom_errorbar(ggplot2::aes(ymin = d18Oc - d18Oc_err, # Add error bars on model result (1 SD)
ymax = d18Oc + d18Oc_err),
width = dat$D_err) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = D - D_err,
xmax = D + D_err),
height = 0.05) +
ggplot2::ggtitle("Plot of d18Oc values vs. depth. Black = data, Red = model, Errorbars = 1 SD")
plot(fitplot)
}
# Estimate growth rate variability and round up to nearest multiple of 100 for conservative boundary
GRavmax <- ceiling(max(diff(dat[dat$YEARMARKER == 1,1])) / 365 / 100) * 100
# Find tailored range of temperatures from data
d18Oc_range <- range(dat$d18Oc) # Find d18Oc range in data
if(transfer_function == "KimONeil97"){ # Find temperature range (to be superseded with inverse d18O_model function in later updates)
T_range <- 18.03 * 1000 / (log((d18Oc_range - (0.97002 * rev(range(d18Ow)) - 29.98)) / 1000 + 1) * 1000 + 32.42) - 273.15 # Use Kim and O'Neil (1997) with conversion between VSMOW and VPDB by Brand et al. (2014)
}else if(transfer_function == "GrossmanKu86"){
T_range <-  20.6 - 4.34 * (d18Oc_range - rev(range(d18Ow)) - 0.2) # Use Grossmann and Ku (1986) modified by Dettmann et al. (1999)
}else{
print("ERROR: Supplied transfer function is not recognized")
}
T_max <- max(T_range)
T_amp_max <- 2 * abs(diff(T_range))
# Collate lower boundaries of parameters
parl <- c(
T_amp = 0, # Minimum T amplitude in degrees C
T_pha = 0, # Minimum phase in days
T_av = -4, # Minimum average T in degrees C
G_amp = 0, # Minimum seasonal GR range in um/d
G_pha = 0, # Minimum GR phase in days
G_av = -1 * GRavmax, # Minimum average GR in um/d.
G_skw = 0 # Minimum skew factor
)
# Collate upper boundaries of parameters
paru <- c(
T_amp = round(T_amp_max + 0.5, 0), # Maximum T amplitude in degrees C
T_pha = 365, # Maximum phase in days
T_av = round(T_max + 0.5, 0), # Maximum average T in degrees C
G_amp = 2 * GRavmax, # Maximum seasonal GR range in um/d
G_pha = 365, # Maximum GR phase in days
G_av = GRavmax, # Maximum average GR in um/d (based on conservative boundaries of YEARMARKER indicators)
G_skw = 100 # Maximum skew factor
)
# Set parameters for SCEUA optimization
iniflg = 1 # Flag for initial parameter array (1 = included)
ngs = 25 # Number of complexes (sub-populations)
maxn = 10000 # Maximum number of function evaluations allowed during optimization
kstop = 5 # Maximum number of evolution loops before convergency
pcento = 0.01 # Percentage change allowed in function value criterion before stop
peps = 0.01 # Convergence level for parameter set (difference between parameters required for stop)
# Run the model on all windows
for(i in 1:length(dynwindow$x)){ # Loop over shell record
print(paste("Processing Datawindow:", i, "of", length(dynwindow$x))) # Keep track of progress
# Isolate year of d18O data based on window data
Dsam <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 1]
Osam <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 2]
if(MC > 0){
D_err <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 4] # Optional: include error on D
O_err <- dat[dynwindow$x[i]:(dynwindow$x[i] + dynwindow$y[i] - 1), 5] # Optional: include error on d18Oc
}else{
D_err <- rep(0, dynwindow$y)
O_err <- rep(0, dynwindow$y)
MC <- 0
}
sinlist <- sinreg(Dsam, Osam) # Run sinusoidal regression to find initial parameter values
# Estimate starting parameters from regression results
O_av_start <- sinlist[[1]][1] # Export starting value for annual d18O average
O_amp_start <- sinlist[[1]][2] # Export starting value for d18O amplitude
if(transfer_function == "KimONeil97"){
T_av_start <- 18.03 * 1000 / (1000 * log((O_av_start - (0.97002 * mean(d18Ow) - 29.98)) / 1000 + 1) + 32.42) - 273.15  # Estimate mean temperature. Use Kim and O'Neil (1997) with conversion between VSMOW and VPDB by Brand et al. (2014)
T_amp_start <- 18.03 * 1000 / (1000 * log((O_av_start - O_amp_start - (0.97002 * mean(d18Ow) - 29.98)) / 1000 + 1) + 32.42) - 273.15 - T_av_start # Estimate temperature amplitude. Use Kim and O'Neil (1997) with conversion between VSMOW and VPDB by Brand et al. (2014)
}else if(transfer_function == "GrossmanKu86"){
T_av_start <- 20.6 - 4.34 * (O_av_start - mean(d18Ow) - 0.2) # Estimate mean temperature. Use Grossmann and Ku (1986) modified by Dettmann et al. (1999)
T_amp_start <- 20.6 - 4.34 * (O_av_start - O_amp_start - mean(d18Ow) - 0.2) - T_av_start # Estimate mean temperature. Use Grossmann and Ku (1986) modified by Dettmann et al. (1999)
}else{
print("ERROR: Supplied transfer function is not recognized")
}
O_pha_start <- sinlist[[1]][4] %% sinlist[[1]][3] # Estimate position (in depth of the first peak in d18O)
O_peak <- O_pha_start + Dsam[1] # Find position of d18O peak in distance domain
O_per_start <- sinlist[[1]][3] # Export starting value for period in distance domain
T_pha_start <- ((O_pha_start - 0.5 * O_per_start) %% O_per_start) / O_per_start * T_per # Estimate position of first peak in temperature (low in d18O) relative to annual cycle (days)
G_av_start <- O_per_start / G_per # Estimate average growth rate in distance/day
years <- ceiling((diff(range(Dsam)) / O_per_start - 1) / 2) * 2 + 1 # Find next odd number to expand the number of simulated years to cover full window
# Collate starting parameters
par0 <- c(
T_amp = T_amp_start,
T_pha = T_pha_start,
T_av = T_av_start,
G_amp = G_av_start / 2, # Start by estimating growth rate changes by half the average
G_pha = T_pha_start, # Start by estimating that the peak in growth rate coincides with the peak in temperature
G_av = G_av_start,
G_skw = 50 # Start with a no skew
)
invisible(capture.output( # Suppress the details on converging SCEUA
sceua_list <- rtop::sceua(growth_model,
par0,
T_per = T_per,
G_per = G_per,
years = years,
t_int = t_int,
transfer_function = transfer_function,
d18Ow = d18Ow,
Dsam = Dsam,
Osam = Osam,
t_maxtemp = t_maxtemp,
parl,
paru,
maxn,
kstop,
pcento,
ngs,
iniflg = iniflg,
peps = peps,
implicit = function(pars){sum(pars[4]/2, pars[6]) < 1} # Make sure that the cumulative GR curve is not located below 0 (if G_av < - G_amp / 2)
)
))
par1 <- sceua_list[[1]] # Eport parameters of final model
names(par1) <- names(par0)
result <- growth_model(par1, T_per, G_per, years, t_int, transfer_function, d18Ow, Dsam, Osam, t_maxtemp, plot = FALSE, MC, D_err, O_err, return = "result") # Calculate the end result of the best fit
if(plot == TRUE){
fitplot <- fitplot + # Add the new model fit to the plot to track progress of the model
ggplot2::geom_point(data = as.data.frame(result), ggplot2::aes(Dsam, Omod), colour = "red") +
ggplot2::geom_line(data = as.data.frame(result), ggplot2::aes(Dsam, Omod), colour = "red")
print(fitplot)
}
resultarray[, i + length(dat[1, ]), ] <- rbind(matrix(NA, nrow = i - 1, ncol = 9), result[, 3:11], matrix(NA, nrow = length(dat$D) - i - length(result[,1]) + 1, ncol = 9)) # Add results to result array
parmat[, i] <- par1 # Add parameters to parameter array
}
# Provide names for all dimensions in the result array
dimnames(resultarray) <- list(
paste("sample", 1:length(resultarray[, 1, 3])),
c(colnames(dat), paste("window", 1:length(dynwindow$x))),
c("Modelled_d18O", "d18O_residuals", "Time_of_year", "Instantaneous_growth_rate", "Modelled temperature", "Modelled_d18O_SD", "Time_of_Year_SD", "Instantaneous_growth_rate_SD", "Modelled_temperature_SD")
)
colnames(parmat) <- paste("window", 1:length(parmat[1,]))
return(list(resultarray, parmat))
}
resultlist <- run_model(dat, dynwindow, "KimONeil97", MC = 10, plot = TRUE)
resultlist <- run_model(dat, dynwindow, "GrossmanKu86", MC = 10, plot = TRUE)
resultlist <- run_model(dat, dynwindow, "GrossmanKu85", MC = 10, plot = TRUE)
wrap_function <- function(path, # Wrapping function for the entire model package
file_name, # Give file name (don't forget to add the extention, should be in CSV format)
transfer_function = "KimONeil97", # Set transfer function of the record, default is Kim and O'Neil 1997. Grossman and Ku 1986 is also supported
t_int = 1, # Set time interval in days
T_per = 365, # Set annual time period in days (default = 365)
d18Ow = 0, # Set d18Ow value or vector (default = constant year-round at 0 VSMOW). Alternative options are either one value (assumed constant year-round) or a vector with length T_per / t_int and interval t_int specifying d18Ow evolution through one year.
t_maxtemp = 182.5, # Define the day of the year at which temperature is heighest. Default = Assume that the day of maximum temperature is helfway through the year
MC = 1000, # Number of MC simulations to include measurement error into error analysis. Default = 1000 (if MC = 0, error on D and d18O measurements not considered)
plot = TRUE, # Should intermediate plots be given to track progress? WARNING: plotting makes the script much slower, especially for long datasets.
plot_export = TRUE, # Should a plot of the results be saved as PDF?
export_raw = FALSE, # Should the results of all individual model runs be exported as CSV files?
export_path # Path where result files are exported
){
oldwd <- getwd()
on.exit(setwd(oldwd))
# STEP 1: Import data
setwd(path)
importlist <- data_import(file_name)
if(length(importlist) != 2){ # Catch errors in the input data
return("ERROR: Input data does not match the default input data format")
}
dat <- importlist[[1]]
dynwindow <- importlist[[2]]
G_per <- T_per # Period of growth rate sinusoid should equal that of the temperature sinusoid (which is given)
# STEP 2: Run the model
resultlist <- run_model(dat, dynwindow, transfer_function, d18Ow, T_per, G_per, t_int, t_maxtemp, MC, plot = TRUE)
resultarray <- resultlist[[1]]
parmat <- resultlist[[2]]
# STEP 3: Align model results to cumulative timescale
print("Calculating cumulative day of the year results...")
suppressWarnings(resultarray[, , 3] <- cumulative_day(resultarray, TRUE, TRUE, export_path)) # Calculate cumulative day of the year for all model runs and replace matrix in result array
# STEP 4: Order and export results and statistics
export_results(export_path, dat, resultarray, parmat, MC, dynwindow, plot, plot_export, export_raw) # Export results of model
return(resultlist)
}
wrap_function(path = getwd(), file_name = "Virtual_shell.csv", export_path = getwd())
wrap_function(path = getwd(), file_name = "Virtual_shell.csv", transfer_function = "GrossmanKu86", export_path = getwd())
wrap_function(path = getwd(), file_name = "Virtual_shell.csv", transfer_function = "GrossmanKu84", export_path = getwd())
rm(list=ls())
devtools::document()
devtools::install()
require(ShellChron)
require(ShellChron)
require(ShellChron)
path = "E:\Dropbox\Research\Manuscripts\[Submitted - GMD] Bivalve age model\ShellChron\inst\extdata"
path = "E:/Dropbox/Research/Manuscripts/[Submitted - GMD] Bivalve age model/ShellChron/inst/extdata"
file_name <- "test.csv"
export_path <- path
wrap_function(path = path, file_name = file_name, export_path = export_path)
wrap_function(path = path, file_name = file_name, export_path = export_path)
wrap_function(path = path, file_name = file_name, export_path = export_path)
setwd("E:/Dropbox/Research/Manuscripts/[Submitted - GMD] Bivalve age model/tests/data_import_test")
file_name = "test.csv"
data_import <- function(file_name){
dat <- read.csv(file_name, header = T) # Read in data file
# If correct headers are included in the file, the column names don't need to be set
# cols <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
# colnames(dat) <- cols[1:length(dat[1, ])] # Give column names
# WARNING: It is important that the columns in the datafile have the same meaning as defined here.
# If one of the error terms (e.g. the error on the depth measurement: "D_err") is missing, it can also be added to the datafile as a column filled with zeroes (indicating the error is 0)
dat <- dat[order(dat[, 1]),] # Order data by D
# Check the structure of the import dataframe
if(ncol(dat) == 5){ # If the number of columns checks out
# Check the column names, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
}
}else if(ncol(dat) == 3){ # If SD columns are omitted
# Check the names of provided columns, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER")
}
dat$D_err <- rep(0, nrow(dat))
dat$d18Oc_err <- rep(0, nrow(dat))
}else{
return("ERROR: Input data does not match the default input data format")
}
# Define sliding window based on indicated year markers
YEARMARKER <- which(dat$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(dat$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modelling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(dat$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modelling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot<-which(dynwindow$x + dynwindow$y > length(dat[,1])) # Find windows that overshoot the length of dat
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
dynwindow$y <- dynwindow$y[-overshoot] # Remove overshooting windows
if((length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1) < length(dat[, 1])){ # Increase length of the final window in case samples at the end are missed due to jumps in window size
dynwindow$y[length(dynwindow$y)] <- dynwindow$y[length(dynwindow$y)] + (length(dat[, 1]) - (length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1))
}
return(list(dat,dynwindow))
}
importlist <- data_import(file_name)
dat <- read.csv(file_name, header = T)
dat <- dat[order(dat[, 1]),] # Order data by D
# Check the structure of the import dataframe
if(ncol(dat) == 5){ # If the number of columns checks out
# Check the column names, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
}
}else if(ncol(dat) == 3){ # If SD columns are omitted
# Check the names of provided columns, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER")
}
dat$D_err <- rep(0, nrow(dat))
dat$d18Oc_err <- rep(0, nrow(dat))
}else{
return("ERROR: Input data does not match the default input data format")
}
YEARMARKER <- which(dat$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(dat$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
data_import <- function(file_name){
dat <- read.csv(file_name, header = T) # Read in data file
# If correct headers are included in the file, the column names don't need to be set
# cols <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
# colnames(dat) <- cols[1:length(dat[1, ])] # Give column names
# WARNING: It is important that the columns in the datafile have the same meaning as defined here.
# If one of the error terms (e.g. the error on the depth measurement: "D_err") is missing, it can also be added to the datafile as a column filled with zeroes (indicating the error is 0)
dat <- dat[order(dat[, 1]),] # Order data by D
# Check the structure of the import dataframe
if(ncol(dat) == 5){ # If the number of columns checks out
# Check the column names, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
}
}else if(ncol(dat) == 3){ # If SD columns are omitted
# Check the names of provided columns, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER")
}
dat$D_err <- rep(0, nrow(dat))
dat$d18Oc_err <- rep(0, nrow(dat))
}else{
return("ERROR: Input data does not match the default input data format")
}
# Define sliding window based on indicated year markers
YEARMARKER <- which(dat$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(dat$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
if(length(yearwindow) > 1){
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modelling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(dat$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modelling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot<-which(dynwindow$x + dynwindow$y > length(dat[,1])) # Find windows that overshoot the length of dat
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
dynwindow$y <- dynwindow$y[-overshoot] # Remove overshooting windows
if((length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1) < length(dat[, 1])){ # Increase length of the final window in case samples at the end are missed due to jumps in window size
dynwindow$y[length(dynwindow$y)] <- dynwindow$y[length(dynwindow$y)] + (length(dat[, 1]) - (length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1))
}
}else if(length(yearwindow) == 1){ # Catch exception of datasets with only two yearmarkers
dynwindow <- data.frame(
x = 1:(length(dat$D) - yearwindow[length(yearwindow)] + 1),
y = rep(yearwindow, (length(dat$D) - yearwindow[length(yearwindow)] + 1))
)
}else{
return("ERROR: Need at least 2 year markers to estimate window size")
}
return(list(dat,dynwindow))
data_import <- function(file_name){
dat <- read.csv(file_name, header = T) # Read in data file
# If correct headers are included in the file, the column names don't need to be set
# cols <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
# colnames(dat) <- cols[1:length(dat[1, ])] # Give column names
# WARNING: It is important that the columns in the datafile have the same meaning as defined here.
# If one of the error terms (e.g. the error on the depth measurement: "D_err") is missing, it can also be added to the datafile as a column filled with zeroes (indicating the error is 0)
dat <- dat[order(dat[, 1]),] # Order data by D
# Check the structure of the import dataframe
if(ncol(dat) == 5){ # If the number of columns checks out
# Check the column names, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER", "D_err", "d18Oc_err")
}
}else if(ncol(dat) == 3){ # If SD columns are omitted
# Check the names of provided columns, and rename them if necessary
if(!all(colnames(dat) == c("D", "d18Oc", "YEARMARKER"))){
colnames(dat) <- c("D", "d18Oc", "YEARMARKER")
}
dat$D_err <- rep(0, nrow(dat))
dat$d18Oc_err <- rep(0, nrow(dat))
}else{
return("ERROR: Input data does not match the default input data format")
}
# Define sliding window based on indicated year markers
YEARMARKER <- which(dat$YEARMARKER == 1) # Read position of yearmarkers in data.
yearwindow <- diff(which(dat$YEARMARKER == 1)) # Calculate the number of datapoints in each year between consecutive year markers
if(length(yearwindow) > 1){
dynwindow <- approx( # Interpolate between the numbers of annual datapoints to create list of starting positions of growth windows and their size for age modelling
x = YEARMARKER[-length(YEARMARKER)],
y = yearwindow,
xout = 1:(length(dat$D) - yearwindow[length(yearwindow)] + 1), # X indicates starting positions of windows used for age modelling
method = "linear",
rule = 2 # Window sizes for beginning given as NA's, for end equal to last value
)
dynwindow$y <- round(dynwindow$y) # Round off window sizes to integers
dynwindow$y[dynwindow$y < 10] <- 10 # Eliminate small window sizes to lend confidence to the sinusoidal fit
overshoot<-which(dynwindow$x + dynwindow$y > length(dat[,1])) # Find windows that overshoot the length of dat
dynwindow$x <- dynwindow$x[-overshoot] # Remove overshooting windows
dynwindow$y <- dynwindow$y[-overshoot] # Remove overshooting windows
if((length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1) < length(dat[, 1])){ # Increase length of the final window in case samples at the end are missed due to jumps in window size
dynwindow$y[length(dynwindow$y)] <- dynwindow$y[length(dynwindow$y)] + (length(dat[, 1]) - (length(dynwindow$x) + dynwindow$y[length(dynwindow$x)] - 1))
}
}else if(length(yearwindow) == 1){ # Catch exception of datasets with only two yearmarkers
dynwindow <- data.frame(
x = 1:(length(dat$D) - yearwindow[length(yearwindow)] + 1),
y = rep(yearwindow, (length(dat$D) - yearwindow[length(yearwindow)] + 1))
)
}else{
return("ERROR: Need at least 2 year markers to estimate window size")
}
return(list(dat,dynwindow))
}
importlist <- data_import(file_name)
dat <- importlist[[1]]
View(dat)
dynwindow <- importlist[[2]]
View(dynwindow)
devtools::document()
devtools::document()
path = "E:\Dropbox\Research\Manuscripts\[Submitted - GMD] Bivalve age model\ShellChron\tests\data_import_test"
path = "E:/Dropbox/Research/Manuscripts/[Submitted - GMD] Bivalve age model/ShellChron/tests/data_import_test"
file_name = "test.csv"
export_path = path
wrap_function(path, file_name, export_path = path)
path
setwd(path)
path
path = "E:/Dropbox/Research/Manuscripts/[Submitted - GMD] Bivalve age model/tests/data_import_test"
wrap_function(path, file_name, export_path = path)
wrap_function(path, file_name, export_path = path)
devtools::document()
devtools::install()
devtools::document()
setwd("E:/Dropbox/Research/postdoc/UNBIAS")
devtools::create("seasonalclumped")
